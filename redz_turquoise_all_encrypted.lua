--[[ TARNO | ALFA ENCRYPTED ]]--
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
function dec(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
        return r;
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end
loadstring(dec([[
bG9jYWwgQ29uZmlnc19IVUIgPSB7CiAgQ29yX0h1YiA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApLAogIENvcl9PcHRpb25zID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCksCiAgQ29yX1N0cm9rZSA9IENvbG9yMy5mcm9tUkdCKDY0LCAyMjQsIDIwOCksIAogIENvcl9UZXh0ID0gQ29sb3IzLmZyb21SR0IoNjQsIDIyNCwgMjA4KSwKICBDb3JfRGFya1RleHQgPSBDb2xvcjMuZnJvbVJHQigyNDAsIDI0MCwgMjQwKSwKICBDb3JuZXJfUmFkaXVzID0gVURpbS5uZXcoMCw0KSwKICBUZXh0X0ZvbnQgPSBFbnVtLkZvbnQuRnJlZG9rYU9uZQp9Cgpsb2NhbCBDb3JlR3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKbG9jYWwgVHdlZW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJUd2VlblNlcnZpY2UiKQpsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKCmxvY2FsIGZ1bmN0aW9uIENyZWF0ZShpbnN0YW5jZSwgcGFyZW50LCBwcm9wcykKICBsb2NhbCBuZXcgPSBJbnN0YW5jZS5uZXcoaW5zdGFuY2UsIHBhcmVudCkKICBpZiBwcm9wcyB0aGVuCiAgICB0YWJsZS5mb3JlYWNoKHByb3BzLCBmdW5jdGlvbihwcm9wLCB2YWx1ZSkKICAgICAgbmV3W3Byb3BdID0gdmFsdWUKICAgIGVuZCkKICBlbmQKICByZXR1cm4gbmV3CmVuZAoKbG9jYWwgZnVuY3Rpb24gU2V0UHJvcHMoaW5zdGFuY2UsIHByb3BzKQogIGlmIGluc3RhbmNlIGFuZCBwcm9wcyB0aGVuCiAgICB0YWJsZS5mb3JlYWNoKHByb3BzLCBmdW5jdGlvbihwcm9wLCB2YWx1ZSkKICAgICAgaW5zdGFuY2VbcHJvcF0gPSB2YWx1ZQogICAgZW5kKQogIGVuZAogIHJldHVybiBpbnN0YW5jZQplbmQKCmxvY2FsIGZ1bmN0aW9uIENvcm5lcihwYXJlbnQsIHByb3BzKQogIGxvY2FsIG5ldyA9IENyZWF0ZSgiVUlDb3JuZXIiLCBwYXJlbnQpCiAgbmV3LkNvcm5lclJhZGl1cyA9IENvbmZpZ3NfSFVCLkNvcm5lcl9SYWRpdXMKICBpZiBwcm9wcyB0aGVuCiAgICBTZXRQcm9wcyhuZXcsIHByb3BzKQogIGVuZAogIHJldHVybiBuZXcKZW5kCgpsb2NhbCBmdW5jdGlvbiBTdHJva2UocGFyZW50LCBwcm9wcykKICBsb2NhbCBuZXcgPSBDcmVhdGUoIlVJU3Ryb2tlIiwgcGFyZW50KQogIG5ldy5Db2xvciA9IENvbmZpZ3NfSFVCLkNvcl9TdHJva2UKICBuZXcuQXBwbHlTdHJva2VNb2RlID0gIkJvcmRlciIKICBpZiBwcm9wcyB0aGVuCiAgICBTZXRQcm9wcyhuZXcsIHByb3BzKQogIGVuZAogIHJldHVybiBuZXcKZW5kCgpsb2NhbCBmdW5jdGlvbiBDcmVhdGVUd2VlbihpbnN0YW5jZSwgcHJvcCwgdmFsdWUsIHRpbWUsIHR3ZWVuV2FpdCkKICBsb2NhbCB0d2VlbiA9IFR3ZWVuU2VydmljZTpDcmVhdGUoaW5zdGFuY2UsCiAgVHdlZW5JbmZvLm5ldyh0aW1lLCBFbnVtLkVhc2luZ1N0eWxlLkxpbmVhciksCiAge1twcm9wXSA9IHZhbHVlfSkKICB0d2VlbjpQbGF5KCkKICBpZiB0d2VlbldhaXQgdGhlbgogICAgdHdlZW4uQ29tcGxldGVkOldhaXQoKQogIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIFRleHRTZXRDb2xvcihpbnN0YW5jZSkKICBpbnN0YW5jZS5Nb3VzZUVudGVyOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgQ3JlYXRlVHdlZW4oaW5zdGFuY2UsICJUZXh0Q29sb3IzIiwgQ29sb3IzLmZyb21SR0IoMzAsIDE0MCwgMjAwKSwgMC40LCB0cnVlKQogIGVuZCkKICBpbnN0YW5jZS5Nb3VzZUxlYXZlOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgQ3JlYXRlVHdlZW4oaW5zdGFuY2UsICJUZXh0Q29sb3IzIiwgQ29uZmlnc19IVUIuQ29yX1RleHQsIDAuNCwgZmFsc2UpCiAgZW5kKQplbmQKCmxvY2FsIFNjcmVlbkd1aSA9IENyZWF0ZSgiU2NyZWVuR3VpIiwgQ29yZUd1aSwgewogIE5hbWUgPSAiWUhVQiBsaWJyYXJ5Igp9KQoKU2NyZWVuRmluZCA9IENvcmVHdWk6RmluZEZpcnN0Q2hpbGQoU2NyZWVuR3VpLk5hbWUpCmlmIFNjcmVlbkZpbmQgYW5kIFNjcmVlbkZpbmQgfj0gU2NyZWVuR3VpIHRoZW4KICBTY3JlZW5GaW5kOkRlc3Ryb3koKQplbmQKCmZ1bmN0aW9uIERlc3Ryb3lTY3JpcHQoKQogIFNjcmVlbkd1aTpEZXN0cm95KCkKZW5kCgpsb2NhbCBNZW51X05vdGlmaSA9IENyZWF0ZSgiRnJhbWUiLCBTY3JlZW5HdWksIHsKICBTaXplID0gVURpbTIubmV3KDAsIDMwMCwgMSwgMCksCiAgUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgMCwgMCwgMCksCiAgQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygxLCAwKSwKICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQp9KQoKbG9jYWwgUGFkZGluZyA9IENyZWF0ZSgiVUlQYWRkaW5nIiwgTWVudV9Ob3RpZmksIHsKICBQYWRkaW5nTGVmdCA9IFVEaW0ubmV3KDAsIDI1KSwKICBQYWRkaW5nVG9wID0gVURpbS5uZXcoMCwgMjUpLAogIFBhZGRpbmdCb3R0b20gPSBVRGltLm5ldygwLCA1MCkKfSkKCmxvY2FsIExpc3RMYXlvdXQgPSBDcmVhdGUoIlVJTGlzdExheW91dCIsIE1lbnVfTm90aWZpLCB7CiAgUGFkZGluZyA9IFVEaW0ubmV3KDAsIDE1KSwKICBWZXJ0aWNhbEFsaWdubWVudCA9ICJCb3R0b20iCn0pCgpmdW5jdGlvbiBNYWtlTm90aWZpKENvbmZpZ3MpCiAgbG9jYWwgVGl0bGUgPSBDb25maWdzLlRpdGxlIG9yICJSRUR6IEhVQiIKICBsb2NhbCB0ZXh0ID0gQ29uZmlncy5UZXh0IG9yICJOb3RpZmljYcOnw6NvIgogIGxvY2FsIHRpbWV3YWl0ID0gQ29uZmlncy5UaW1lIG9yIDUKICAKICBsb2NhbCBGcmFtZTEgPSBDcmVhdGUoIkZyYW1lIiwgTWVudV9Ob3RpZmksIHsKICAgIFNpemUgPSBVRGltMi5uZXcoMiwgMCwgMCwgMCksCiAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgIEF1dG9tYXRpY1NpemUgPSAiWSIsCiAgICBOYW1lID0gIlRpdGxlIgogIH0pCiAgCiAgbG9jYWwgRnJhbWUyID0gQ3JlYXRlKCJGcmFtZSIsIEZyYW1lMSwgewogICAgU2l6ZSA9IFVEaW0yLm5ldygwLCBNZW51X05vdGlmaS5TaXplLlguT2Zmc2V0IC0gNTAsIDAsIDApLAogICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9IdWIsCiAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCBNZW51X05vdGlmaS5TaXplLlguT2Zmc2V0LCAwLCAwKSwKICAgIEF1dG9tYXRpY1NpemUgPSAiWSIKICB9KUNvcm5lcihGcmFtZTIpCiAgCiAgbG9jYWwgVGV4dExhYmVsID0gQ3JlYXRlKCJUZXh0TGFiZWwiLCBGcmFtZTIsIHsKICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLAogICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgVGV4dCA9IFRpdGxlLAogICAgVGV4dFNpemUgPSAyMCwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIwLCAwLCA1KSwKICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0CiAgfSkKICAKICBsb2NhbCBUZXh0QnV0dG9uID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgRnJhbWUyLCB7CiAgICBUZXh0ID0gIlgiLAogICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgIFRleHRTaXplID0gMjAsCiAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgIFRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKSwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDEsIC01LCAwLCA1KSwKICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMSwgMCksCiAgICBTaXplID0gVURpbTIubmV3KDAsIDI1LCAwLCAyNSkKICB9KQogIAogIGxvY2FsIFRleHRMYWJlbCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgRnJhbWUyLCB7CiAgICBTaXplID0gVURpbTIubmV3KDEsIC0zMCwgMCwgMCksCiAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAyMCwgMCwgVGV4dEJ1dHRvbi5TaXplLlkuT2Zmc2V0ICsgMTApLAogICAgVGV4dFNpemUgPSAxNSwKICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfRGFya1RleHQsCiAgICBUZXh0WEFsaWdubWVudCA9ICJMZWZ0IiwKICAgIFRleHRZQWxpZ25tZW50ID0gIlRvcCIsCiAgICBBdXRvbWF0aWNTaXplID0gIlkiLAogICAgVGV4dCA9IHRleHQsCiAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICBBdXRvbWF0aWNTaXplID0gRW51bS5BdXRvbWF0aWNTaXplLlksCiAgICBUZXh0V3JhcHBlZCA9IHRydWUKICB9KQogIAogIGxvY2FsIEZyYW1lU2l6ZSA9IENyZWF0ZSgiRnJhbWUiLCBGcmFtZTIsIHsKICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMiksCiAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1N0cm9rZSwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIsIDAsIDMwKSwKICAgIEJvcmRlclNpemVQaXhlbCA9IDAKICB9KUNvcm5lcihGcmFtZVNpemUpQ3JlYXRlKCJGcmFtZSIsIEZyYW1lMiwgewogICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAwLCA1KSwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDEsIDUpLAogICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICB9KQogIAogIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgQ3JlYXRlVHdlZW4oRnJhbWVTaXplLCAiU2l6ZSIsIFVEaW0yLm5ldygwLCAwLCAwLCAyKSwgdGltZXdhaXQsIHRydWUpCiAgZW5kKQogIAogIFRleHRCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCAtMjAsIDAsIDApLCAwLjEsIHRydWUpCiAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCBNZW51X05vdGlmaS5TaXplLlguT2Zmc2V0LCAwLCAwKSwgMC41LCB0cnVlKQogICAgRnJhbWUxOkRlc3Ryb3koKQogIGVuZCkKICAKICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIENyZWF0ZVR3ZWVuKEZyYW1lMiwgIlBvc2l0aW9uIiwgVURpbTIubmV3KDAsIC0yMCwgMCwgMCksIDAuNSwgdHJ1ZSkKICAgIENyZWF0ZVR3ZWVuKEZyYW1lMiwgIlBvc2l0aW9uIiwgVURpbTIubmV3KCksIDAuMSwgdHJ1ZSl0YXNrLndhaXQodGltZXdhaXQpCiAgICBpZiBGcmFtZTIgdGhlbgogICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCAtMjAsIDAsIDApLCAwLjEsIHRydWUpCiAgICAgIENyZWF0ZVR3ZWVuKEZyYW1lMiwgIlBvc2l0aW9uIiwgVURpbTIubmV3KDAsIE1lbnVfTm90aWZpLlNpemUuWC5PZmZzZXQsIDAsIDApLCAwLjUsIHRydWUpCiAgICAgIEZyYW1lMTpEZXN0cm95KCkKICAgIGVuZAogIGVuZCkKZW5kCgpmdW5jdGlvbiBNYWtlV2luZG93KENvbmZpZ3MpCiAgbG9jYWwgdGl0bGUgPSBDb25maWdzLkh1Yi5UaXRsZSBvciAiUkVEeiBIVUIiCiAgbG9jYWwgQW5pbV9UaXRsZSA9IENvbmZpZ3MuSHViLkFuaW1hdGlvbiBvciAiYnkgOiByZWR6OTk5OSIKICAKICBsb2NhbCBLZXlTeXN0ZW0gPSBDb25maWdzLktleS5LZXlTeXN0ZW0gb3IgZmFsc2UKICBsb2NhbCBLZXlUaXRsZSA9IENvbmZpZ3MuS2V5LlRpdGxlIG9yICJLZXkgU3lzdGVtIgogIGxvY2FsIEtleURlc2NyaXB0aW9uID0gQ29uZmlncy5LZXkuRGVzY3JpcHRpb24gb3IgIi4tLiIKICBsb2NhbCBLZXlLZXkgPSBDb25maWdzLktleS5LZXlzIG9yIHsiMTIzIiwgIjMyMSJ9CiAgbG9jYWwgS2V5TGluayA9IENvbmZpZ3MuS2V5LktleUxpbmsgb3IgIiIKICBsb2NhbCBLZXlOb3RpZmljYXRpb25zID0gQ29uZmlncy5LZXkuTm90aWZpLk5vdGlmaWNhdGlvbnMgb3IgdHJ1ZQogIGxvY2FsIEtleU5vdFN1Y2Nlc3MgPSBDb25maWdzLktleS5Ob3RpZmkuSW5jb3JyZWN0a2V5IG9yICJUaGUga2V5IGlzIGluY29ycmVjdCIKICBsb2NhbCBLZXlTdWNjZXNzID0gQ29uZmlncy5LZXkuTm90aWZpLkNvcnJlY3RLZXkgb3IgIlJ1bm5pbmcgdGhlIFNjcmlwdC4uLiIKICBsb2NhbCBLZXlDb3B5S2V5TGluayA9IENvbmZpZ3MuS2V5Lk5vdGlmaS5Db3B5S2V5TGluayBvciAiQ29waWVkIHRvIENsaXBib2FyZCIKICAKICBpZiBLZXlTeXN0ZW0gdGhlbgogICAgbG9jYWwgS2V5TWVudSA9IENyZWF0ZSgiRnJhbWUiLCBTY3JlZW5HdWksIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCA0MDAsIDAsIDIyMCksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9IdWIsCiAgICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpLAogICAgICBBY3RpdmUgPSB0cnVlLAogICAgICBEcmFnZ2FibGUgPSB0cnVlCiAgICB9KUNvcm5lcihLZXlNZW51KQogICAgCiAgICBsb2NhbCBDbG9zZUJ1dHRvbiA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIEtleU1lbnUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAzMCwgMCwgMzApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMTAsIDAsIDUpLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDEsIDApLAogICAgICBUZXh0ID0gIlgiLAogICAgICBGb250ID0gRW51bS5Gb250LkZyZWRva2FPbmUsCiAgICAgIFRleHRTY2FsZWQgPSB0cnVlLAogICAgICBUZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjQwLCAwLCAwKSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICB9KUNvcm5lcihDbG9zZUJ1dHRvbikKICAgIAogICAgbG9jYWwgVGl0bGUgPSBDcmVhdGUoIlRleHRMYWJlbCIsIEtleU1lbnUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtODAsIDAsIDIwKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMjAsIDAsIDUpLAogICAgICBUZXh0ID0gS2V5VGl0bGUsCiAgICAgIEZvbnQgPSBDb25maWdzX0hVQi5UZXh0X0ZvbnQsCiAgICAgIFRleHRTY2FsZWQgPSB0cnVlLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgfSkKICAgIAogICAgbG9jYWwgRGVzY3JpcHRpb24gPSBDcmVhdGUoIlRleHRMYWJlbCIsIEtleU1lbnUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtODAsIDAsIDApLAogICAgICBUZXh0ID0gS2V5RGVzY3JpcHRpb24sCiAgICAgIFRleHRTaXplID0gMTcsCiAgICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfRGFya1RleHQsCiAgICAgIEZvbnQgPSBDb25maWdzX0hVQi5UZXh0X0ZvbnQsCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIwLCAwLCAyNSksCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBBdXRvbWF0aWNTaXplID0gIlkiLAogICAgICBUZXh0WUFsaWdubWVudCA9ICJUb3AiLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgfSkKICAgIAogICAgbG9jYWwgQ29uZmlybUJ1dHRvbiA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIEtleU1lbnUsIHsKICAgICAgVGV4dCA9ICLYo9iv2K7Yp9mEIiwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgVGV4dFNpemUgPSAyMCwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBTaXplID0gVURpbTIubmV3KDAsIDE1MCwgMCwgNDApLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDEsIDApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMzUsIDAsIDE0MCksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfT3B0aW9ucwogICAgfSlDb3JuZXIoQ29uZmlybUJ1dHRvbikKICAgIAogICAgbG9jYWwgR2V0S2V5TGluayA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIEtleU1lbnUsIHsKICAgICAgVGV4dCA9ICLYp9mE2K3YtdmI2YQg2LnZhNmJINin2YTYsdin2KjYtyIsCiAgICAgIEZvbnQgPSBDb25maWdzX0hVQi5UZXh0X0ZvbnQsCiAgICAgIFRleHRTaXplID0gMjAsCiAgICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAxNTAsIDAsIDQwKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDE0MCksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfT3B0aW9ucwogICAgfSlDb3JuZXIoR2V0S2V5TGluaykKICAgIAogICAgbG9jYWwgVGV4dEJveCA9IENyZWF0ZSgiVGV4dEJveCIsIEtleU1lbnUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtNzAsIDAsIDQwKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDkwKSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9PcHRpb25zLAogICAgICBQbGFjZWhvbGRlclRleHQgPSAi2KfZg9iq2KjZhyDZh9mG2KfYpyIsCiAgICAgIFRleHQgPSAiIiwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgICBUZXh0U2l6ZSA9IDI1CiAgICB9KUNvcm5lcihUZXh0Qm94KQogICAgCiAgICBsb2NhbCBLZXlWZXJpZnkgPSBmYWxzZQogICAgQ2xvc2VCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIGxvY2FsIFVJU2NhbGUgPSBDcmVhdGUoIlVJU2NhbGUiLCBTY3JlZW5HdWkpCiAgICAgIENyZWF0ZVR3ZWVuKFVJU2NhbGUsICJTY2FsZSIsIDAsIDAuMjAsIHRydWUpCiAgICAgIFNjcmVlbkd1aTpEZXN0cm95KCkKICAgIGVuZCkKICAgIAogICAgQ29uZmlybUJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgZm9yIF8sdiBpbiBwYWlycyhLZXlLZXkpIGRvCiAgICAgICAgaWYgVGV4dEJveC5UZXh0ID09IHYgdGhlbgogICAgICAgICAgS2V5VmVyaWZ5ID0gdHJ1ZQogICAgICAgIGVuZAogICAgICBlbmQKICAgICAgaWYgS2V5Tm90aWZpY2F0aW9ucyBhbmQgbm90IEtleVZlcmlmeSB0aGVuCiAgICAgICAgTWFrZU5vdGlmaSh7CiAgICAgICAgICBUaXRsZSA9IEtleVRpdGxlLAogICAgICAgICAgVGV4dCA9IEtleU5vdFN1Y2Nlc3MsCiAgICAgICAgICBUaW1lID0gNQogICAgICAgIH0pCiAgICAgIGVsc2VpZiBLZXlOb3RpZmljYXRpb25zIHRoZW4KICAgICAgICBNYWtlTm90aWZpKHsKICAgICAgICAgIFRpdGxlID0gS2V5VGl0bGUsCiAgICAgICAgICBUZXh0ID0gS2V5U3VjY2VzcywKICAgICAgICAgIFRpbWUgPSA1CiAgICAgICAgfSkKICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIEdldEtleUxpbmsuTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIGlmIEtleU5vdGlmaWNhdGlvbnMgdGhlbgogICAgICAgIHNldGNsaXBib2FyZChLZXlMaW5rKQogICAgICAgIE1ha2VOb3RpZmkoewogICAgICAgICAgVGl0bGUgPSBLZXlUaXRsZSwKICAgICAgICAgIFRleHQgPSBLZXlDb3B5S2V5TGluaywKICAgICAgICAgIFRpbWUgPSA1CiAgICAgICAgfSkKICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIHJlcGVhdCB0YXNrLndhaXQoKQogICAgdW50aWwgS2V5VmVyaWZ5CiAgICBsb2NhbCBVSVNjYWxlID0gQ3JlYXRlKCJVSVNjYWxlIiwgS2V5TWVudSkKICAgIENyZWF0ZVR3ZWVuKFVJU2NhbGUsICJTY2FsZSIsIDAsIDAuNDAsIHRydWUpCiAgICBLZXlNZW51OkRlc3Ryb3koKQogIGVuZAogIAogIGxvY2FsIE1lbnUgPSBDcmVhdGUoIkZyYW1lIiwgU2NyZWVuR3VpLCB7CiAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YiwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTUwMC8yLCAwLjUsIC0yNzAvMiksCiAgICBBY3RpdmUgPSB0cnVlLAogICAgRHJhZ2dhYmxlID0gdHJ1ZQogIH0pQ29ybmVyKE1lbnUpCiAgCiAgbG9jYWwgVG9wQmFyID0gQ3JlYXRlKCJGcmFtZSIsIE1lbnUsIHsKICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICBWaXNpYmxlID0gZmFsc2UKICB9KQogIAogIGxvY2FsIEJ1dHRvbnNGcmFtZSA9IENyZWF0ZSgiRnJhbWUiLCBUb3BCYXIsIHsKICAgIFNpemUgPSBVRGltMi5uZXcoMCwgNDAsIDEsIC01KSwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0xMCwgMCwgMi41KSwKICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMSwgMCksCiAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogIH0pCiAgCiAgbG9jYWwgVGl0bGUgPSBDcmVhdGUoIlRleHRMYWJlbCIsIFRvcEJhciwgewogICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKSwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIwLCAwLCAwKSwKICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgIEZvbnQgPSBDb25maWdzX0hVQi5UZXh0X0ZvbnQsCiAgICBUZXh0WEFsaWdubWVudCA9ICJMZWZ0IiwKICAgIFRleHQgPSB0aXRsZSwKICAgIFRleHRTaXplID0gMjAsCiAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogIH0pCiAgCiAgbG9jYWwgTWluaW1pemVfQlROID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgQnV0dG9uc0ZyYW1lLCB7CiAgICBUZXh0ID0gIi0iLAogICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgU2l6ZSA9IFVEaW0yLm5ldygwLjUsIDAsIDEsIDApLAogICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgVGV4dFlBbGlnbm1lbnQgPSAiQm90dG9tIiwKICAgIFRleHRTaXplID0gMjUKICB9KQogIAogIElzTWluaW1pemVkID0gZmFsc2UKICBNaW5pbWl6ZV9CVE4uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBNaW5pbWl6ZV9CVE4uVGV4dCA9IG5vdCBJc01pbmltaXplZCBhbmQgIisiIG9yICItIgogICAgaWYgSXNNaW5pbWl6ZWQgdGhlbgogICAgICBJc01pbmltaXplZCA9IGZhbHNlCiAgICAgIENyZWF0ZVR3ZWVuKE1lbnUsICJTaXplIiwgVURpbTIubmV3KDAsIDUwMCwgMCwgMjcwKSwgMC4xNSwgZmFsc2UpCiAgICBlbHNlCiAgICAgIElzTWluaW1pemVkID0gdHJ1ZQogICAgICBDcmVhdGVUd2VlbihNZW51LCAiU2l6ZSIsIFVEaW0yLm5ldygwLCA1MDAsIDAsIDI1KSwgMC4xNSwgdHJ1ZSkKICAgIGVuZAogIGVuZCkKICAKICBsb2NhbCBDbG9zZV9CdXR0b24gPSBDcmVhdGUoIlRleHRCdXR0b24iLCBCdXR0b25zRnJhbWUsIHsKICAgIFRleHQgPSAiw5ciLAogICAgVGV4dFlBbGlnbm1lbnQgPSAiQm90dG9tIiwKICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgIFNpemUgPSBVRGltMi5uZXcoMC41LCAwLCAxLCAwKSwKICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMSwgMCksCiAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAwLCAwLCAwKSwKICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgIFRleHRTaXplID0gMjUKICB9KQogIAogIGxvY2FsIGZ1bmN0aW9uIENyZWF0ZUNsb3NlKCkKICAgIElzTWluaW1pemVkID0gZmFsc2UKICAgIENyZWF0ZVR3ZWVuKE1lbnUsICJTaXplIiwgVURpbTIubmV3KDAsIDUwMCwgMCwgMjcwKSwgMC4zLCBmYWxzZSkKICAgIGxvY2FsIENsb3NlR3VpID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgTWVudSwgewogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC41LAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YiwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKSwKICAgICAgQXV0b0J1dHRvbkNvbG9yID0gZmFsc2UsCiAgICAgIFRleHQgPSAiIiwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNSwKICAgICAgVmlzaWJsZSA9IGZhbHNlCiAgICB9KUNvcm5lcihDbG9zZUd1aSkKICAgIAogICAgbG9jYWwgQ2xvc2VNZW51ID0gQ3JlYXRlKCJGcmFtZSIsIENsb3NlR3VpLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoKSwKICAgICAgQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKSwKICAgICAgVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9IdWIKICAgIH0pQ29ybmVyKENsb3NlTWVudSlTdHJva2UoQ2xvc2VNZW51KQogICAgCiAgICBsb2NhbCBNZW5zYWdlID0gQ3JlYXRlKCJUZXh0TGFiZWwiLCBDbG9zZU1lbnUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLjgsIDAsIDAuMjUsIDApLAogICAgICBUZXh0ID0gItmH2YQg2KfZhtiqINmF2KrYo9mD2K8g2KfZhtmDINiq2LHZitivINin2LrZhNin2YLZhyDYnyIsCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAuMSwgMCwgMC4yKSwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgICBUZXh0U2NhbGVkID0gdHJ1ZSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pCiAgICAKICAgIGxvY2FsIENvbmZpcm0gPSBDcmVhdGUoIlRleHRCdXR0b24iLCBDbG9zZU1lbnUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLjM1LCAwLCAwLjMsIDApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLjEsIDAsIDAuNSwgMCksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfSHViLAogICAgICBUZXh0ID0gItin2LrZhNin2YIg2KfZhNiz2YPYsdio2KoiLAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgICBUZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjQwLCAwLCAwKSwKICAgICAgVGV4dFNpemUgPSAyMAogICAgfSlDb3JuZXIoQ29uZmlybSlTdHJva2UoQ29uZmlybSkKICAgIAogICAgbG9jYWwgQ2FuY2VsID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgQ2xvc2VNZW51LCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMC4zNSwgMCwgMC4zLCAwKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMC45LCAwLCAwLjUsIDApLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDEsIDApLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YiwKICAgICAgVGV4dCA9ICLYp9mE2LrYp9ihIiwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDI0MCwgMCksCiAgICAgIFRleHRTaXplID0gMjAKICAgIH0pQ29ybmVyKENhbmNlbClTdHJva2UoQ2FuY2VsKQogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBTZXRWaXNpYmxlKCkKICAgICAgaWYgTWVudS5TaXplLlkuT2Zmc2V0ID4gMTAwIHRoZW4KICAgICAgICBDbG9zZUd1aS5WaXNpYmxlID0gdHJ1ZQogICAgICBlbHNlCiAgICAgICAgQ2xvc2VHdWkuVmlzaWJsZSA9IGZhbHNlCiAgICAgIGVuZAogICAgZW5kCiAgICAKICAgIFNldFZpc2libGUoKQogICAgTWVudTpHZXRQcm9wZXJ0eUNoYW5nZWRTaWduYWwoIlNpemUiKTpDb25uZWN0KFNldFZpc2libGUpCiAgICAKICAgIENyZWF0ZVR3ZWVuKENsb3NlTWVudSwgIlRyYW5zcGFyZW5jeSIsIDAsIDAuMiwgZmFsc2UpCiAgICBDcmVhdGVUd2VlbihDbG9zZU1lbnUsICJTaXplIiwgVURpbTIubmV3KDAuNywgMCwgMC43LCAwKSwgMC4yLCBmYWxzZSkKICAgIAogICAgQ2FuY2VsLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBDcmVhdGVUd2VlbihDbG9zZU1lbnUsICJUcmFuc3BhcmVuY3kiLCAxLCAwLjMsIGZhbHNlKQogICAgICBDcmVhdGVUd2VlbihDbG9zZU1lbnUsICJTaXplIiwgVURpbTIubmV3KCksIDAuMiwgdHJ1ZSkKICAgICAgQ2xvc2VHdWk6RGVzdHJveSgpCiAgICBlbmQpCiAgICAKICAgIENvbmZpcm0uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIENsb3NlR3VpOkRlc3Ryb3koKQogICAgICBDcmVhdGVUd2VlbihNZW51LCAiU2l6ZSIsIFVEaW0yLm5ldygpLCAwLjMsIHRydWUpCiAgICAgIERlc3Ryb3lTY3JpcHQoKQogICAgZW5kKQogICAgCiAgICBDbG9zZUd1aS5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgQ3JlYXRlVHdlZW4oQ2xvc2VNZW51LCAiVHJhbnNwYXJlbmN5IiwgMSwgMC4zLCBmYWxzZSkKICAgICAgQ3JlYXRlVHdlZW4oQ2xvc2VNZW51LCAiU2l6ZSIsIFVEaW0yLm5ldygpLCAwLjIsIHRydWUpCiAgICAgIENsb3NlR3VpOkRlc3Ryb3koKQogICAgZW5kKQogIGVuZAogIAogIENsb3NlX0J1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KENyZWF0ZUNsb3NlKQogIAogIGxvY2FsIEFuaW1NZW51ID0gQ3JlYXRlKCJGcmFtZSIsIFNjcmVlbkd1aSwgewogICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApLAogICAgQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSksCiAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YgogIH0pQ29ybmVyKEFuaW1NZW51LCB7Q29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNil9KQogIAogIGxvY2FsIEFuaW1fQ3JlZGl0cyA9IENyZWF0ZSgiVGV4dExhYmVsIiwgQW5pbU1lbnUsIHsKICAgIFRleHQgPSBBbmltX1RpdGxlLAogICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApLAogICAgVmlzaWJsZSA9IGZhbHNlLAogICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgIFRleHRUcmFuc3BhcmVuY3kgPSAxLAogICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMTAsIDAsIDApLAogICAgVGV4dFhBbGlnbm1lbnQgPSAiTGVmdCIsCiAgICBUZXh0U2l6ZSA9IDE1CiAgfSkKICAKICBDcmVhdGVUd2VlbihBbmltTWVudSwgIlNpemUiLCBVRGltMi5uZXcoMCwgMCwgMCwgMzUpLCAwLjUsIHRydWUpCiAgQ3JlYXRlVHdlZW4oQW5pbU1lbnUsICJTaXplIiwgVURpbTIubmV3KDAsIDE1MCwgMCwgMzUpLCAwLjUsIHRydWUpCiAgQW5pbV9DcmVkaXRzLlZpc2libGUgPSB0cnVlCiAgdGFzay53YWl0KDAuNSkKICBmb3IgaSA9IDEsIDAsIC0wLjEgZG8gdGFzay53YWl0KCkKICAgIEFuaW1fQ3JlZGl0cy5UZXh0VHJhbnNwYXJlbmN5ID0gaQogIGVuZAogIHRhc2sud2FpdCgxKQogIGZvciBpID0gMCwgMSwgMC4xIGRvIHRhc2sud2FpdCgpCiAgICBBbmltX0NyZWRpdHMuVGV4dFRyYW5zcGFyZW5jeSA9IGkKICBlbmQKICBBbmltX0NyZWRpdHM6RGVzdHJveSgpCiAgQW5pbU1lbnU6RGVzdHJveSgpCiAgQ3JlYXRlVHdlZW4oTWVudSwgIlNpemUiLCBVRGltMi5uZXcoMCwgNTAwLCAwLCAzNSksIDAuNSwgdHJ1ZSkKICBUb3BCYXIuVmlzaWJsZSA9IHRydWUKICBDcmVhdGVUd2VlbihNZW51LCAiU2l6ZSIsIFVEaW0yLm5ldygwLCA1MDAsIDAsIDI3MCksIDAuMywgdHJ1ZSkKICBNZW51LkRyYWdnYWJsZSA9IHRydWUKICAKICBsb2NhbCBsaW5lX0NvbnRhaW5lcnMgPSBDcmVhdGUoIkZyYW1lIiwgTWVudSwgewogICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCiAgfSkKICAKICBmdW5jdGlvbiBNaW5pbWl6ZUJ1dHRvbihDb25maWdzKQogICAgbG9jYWwgaW1hZ2UgPSBDb25maWdzLkltYWdlIG9yICIiCiAgICBsb2NhbCBzaXplID0gQ29uZmlncy5TaXplIG9yIHszMCwgMzB9CiAgICBsb2NhbCBjb2xvciA9IENvbmZpZ3MuQ29sb3Igb3IgQ29uZmlnc19IVUIuQ29yX0h1YgogICAgbG9jYWwgY29ybmVyID0gQ29uZmlncy5Db3JuZXIgb3IgdHJ1ZQogICAgbG9jYWwgc3Ryb2tlID0gQ29uZmlncy5TdHJva2Ugb3IgZmFsc2UKICAgIGxvY2FsIHN0cm9rZWNvbG9yID0gQ29uZmlncy5TdHJva2VDb2xvciBvciBDb25maWdzX0hVQi5Db3JfU3Ryb2tlCiAgICAKICAgIGxvY2FsIEJ1dHRvbiA9IENyZWF0ZSgiSW1hZ2VCdXR0b24iLCBTY3JlZW5HdWksIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCBzaXplWzFdLCAwLCBzaXplWzJdKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMC4xNSwgMCwgMC4xNSwgMCksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBjb2xvciwKICAgICAgSW1hZ2UgPSBpbWFnZSwKICAgICAgQWN0aXZlID0gdHJ1ZSwKICAgICAgRHJhZ2dhYmxlID0gdHJ1ZQogICAgfSlpZiBjb3JuZXIgdGhlbiBDb3JuZXIoQnV0dG9uKSBlbmQgaWYgc3Ryb2tlIHRoZW4gU3Ryb2tlKEJ1dHRvbiwge0NvbG9yID0gc3Ryb2tlY29sb3J9KSBlbmQKICAgIAogICAgbG9jYWwgbWluaW1pemUgPSBmYWxzZQogICAgQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBpZiBtaW5pbWl6ZSB0aGVuCiAgICAgICAgbWluaW1pemUgPSBmYWxzZQogICAgICAgIE1lbnUuVmlzaWJsZSA9IHRydWUKICAgICAgICBpZiBub3QgSXNNaW5pbWl6ZWQgdGhlbgogICAgICAgICAgQ3JlYXRlVHdlZW4oTWVudSwgIlNpemUiLCBVRGltMi5uZXcoMCwgNTAwLCAwLCAyNzApLCAwLjMsIGZhbHNlKQogICAgICAgIGVsc2UKICAgICAgICAgIENyZWF0ZVR3ZWVuKE1lbnUsICJTaXplIiwgVURpbTIubmV3KDAsIDUwMCwgMCwgMjUpLCAwLjMsIGZhbHNlKQogICAgICAgIGVuZAogICAgICBlbHNlCiAgICAgICAgbWluaW1pemUgPSB0cnVlCiAgICAgICAgQ3JlYXRlVHdlZW4oTWVudSwgIlNpemUiLCBVRGltMi5uZXcoMCwgNTAwLCAwLCAwKSwgMC4zLCB0cnVlKQogICAgICAgIE1lbnUuVmlzaWJsZSA9IGZhbHNlCiAgICAgIGVuZAogICAgZW5kKQogIGVuZAogIAogIGxvY2FsIFNjcm9sbEJhciA9IENyZWF0ZSgiU2Nyb2xsaW5nRnJhbWUiLCBNZW51LCB7CiAgICBTaXplID0gVURpbTIubmV3KDAsIDE0MCwgMSwgLXRvbnVtYmVyKFRvcEJhci5TaXplLlkuT2Zmc2V0ICsgMikpLAogICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMSwgMCksCiAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAsIDEpLAogICAgQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygpLAogICAgU2Nyb2xsaW5nRGlyZWN0aW9uID0gIlkiLAogICAgQXV0b21hdGljQ2FudmFzU2l6ZSA9ICJZIiwKICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgU2Nyb2xsQmFyVGhpY2tuZXNzID0gMgogIH0pQ3JlYXRlKCJVSVBhZGRpbmciLCBTY3JvbGxCYXIsIHsKICAgIFBhZGRpbmdMZWZ0ID0gVURpbS5uZXcoMCwgMTApLAogICAgUGFkZGluZ1JpZ2h0ID0gVURpbS5uZXcoMCwgMTApLAogICAgUGFkZGluZ1RvcCA9IFVEaW0ubmV3KDAsIDEwKSwKICAgIFBhZGRpbmdCb3R0b20gPSBVRGltLm5ldygwLCAxMCkKICB9KUNyZWF0ZSgiVUlMaXN0TGF5b3V0IiwgU2Nyb2xsQmFyLCB7CiAgICBQYWRkaW5nID0gVURpbS5uZXcoMCwgNSkKICB9KQogIAogIGxvY2FsIENvbnRhaW5lcnMgPSBDcmVhdGUoIkZyYW1lIiwgTWVudSwgewogICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtdG9udW1iZXIoU2Nyb2xsQmFyLlNpemUuWC5PZmZzZXQgKyAyKSwgMSwgLXRvbnVtYmVyKFRvcEJhci5TaXplLlkuT2Zmc2V0ICsgMikpLAogICAgQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygxLCAxKSwKICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDEsIDAsIDEsIDApLAogICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICB9KUNvcm5lcihDb250YWluZXJzKQogIAogIGxvY2FsIGZ1bmN0aW9uIEFkZF9MaW5lKHByb3BzKQogICAgbG9jYWwgbGluZSA9IENyZWF0ZSgiRnJhbWUiLCBsaW5lX0NvbnRhaW5lcnMsIHByb3BzKQogICAgbGluZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1N0cm9rZQogICAgbGluZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgZW5kCiAgCiAgQWRkX0xpbmUoe1NpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMSksUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgVG9wQmFyLlNpemUuWS5PZmZzZXQpfSkKICBBZGRfTGluZSh7U2l6ZSA9IFVEaW0yLm5ldygwLCAxLCAxLCAtdG9udW1iZXIoVG9wQmFyLlNpemUuWS5PZmZzZXQgKyAxKSksCiAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgU2Nyb2xsQmFyLlNpemUuWC5PZmZzZXQsIDAsIFRvcEJhci5TaXplLlkuT2Zmc2V0KX0pCiAgCiAgbG9jYWwgZmlyc3RWaXNpYmxlID0gdHJ1ZQogIGxvY2FsIEZpcnN0VGFiID0gdHJ1ZQogIGxvY2FsIHRleHRzaXplID0gMTUKICBsb2NhbCB0ZXh0Y29sb3IgPSBDb25maWdzX0hVQi5Db3JfVGV4dAogIAogIE1lbnU6R2V0UHJvcGVydHlDaGFuZ2VkU2lnbmFsKCJTaXplIik6Q29ubmVjdChmdW5jdGlvbigpCiAgICBpZiBNZW51LlNpemUuWS5PZmZzZXQgPiA3MCB0aGVuCiAgICAgIFNjcm9sbEJhci5WaXNpYmxlID0gdHJ1ZQogICAgICBDb250YWluZXJzLlZpc2libGUgPSB0cnVlCiAgICAgIGxpbmVfQ29udGFpbmVycy5WaXNpYmxlID0gdHJ1ZQogICAgZWxzZQogICAgICBTY3JvbGxCYXIuVmlzaWJsZSA9IGZhbHNlCiAgICAgIENvbnRhaW5lcnMuVmlzaWJsZSA9IGZhbHNlCiAgICAgIGxpbmVfQ29udGFpbmVycy5WaXNpYmxlID0gZmFsc2UKICAgIGVuZAogIGVuZCkKICAKICBmdW5jdGlvbiBNYWtlVGFiKENvbmZpZ3MpCiAgICBsb2NhbCBUYWJOYW1lID0gQ29uZmlncy5OYW1lIG9yICJUYWIiCiAgICBsb2NhbCBUYWJUaXRsZSA9IENvbmZpZ3MuVGFiVGl0bGUgb3IgZmFsc2UKICAgIAogICAgbG9jYWwgRnJhbWUgPSBDcmVhdGUoIkZyYW1lIiwgU2Nyb2xsQmFyLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgfSlDb3JuZXIoRnJhbWUpU3Ryb2tlKEZyYW1lKQogICAgCiAgICBsb2NhbCBUZXh0QnV0dG9uID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgRnJhbWUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFRleHQgPSAiIgogICAgfSkKICAgIAogICAgbG9jYWwgVGV4dExhYmVsID0gQ3JlYXRlKCJUZXh0TGFiZWwiLCBGcmFtZSwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgVGV4dENvbG9yMyA9IHRleHRjb2xvciwKICAgICAgVGV4dFNpemUgPSB0ZXh0c2l6ZSwKICAgICAgVGV4dCA9IFRhYk5hbWUKICAgIH0pCiAgICAKICAgIGxvY2FsIENvbnRhaW5lciA9IENyZWF0ZSgiU2Nyb2xsaW5nRnJhbWUiLCBDb250YWluZXJzLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCksCiAgICAgIFNjcm9sbGluZ0RpcmVjdGlvbiA9ICJZIiwKICAgICAgQXV0b21hdGljQ2FudmFzU2l6ZSA9ICJZIiwKICAgICAgQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgU2Nyb2xsQmFyVGhpY2tuZXNzID0gMiwKICAgICAgVmlzaWJsZSA9IGZpcnN0VmlzaWJsZQogICAgfSlDcmVhdGUoIlVJUGFkZGluZyIsIENvbnRhaW5lciwgewogICAgICBQYWRkaW5nTGVmdCA9IFVEaW0ubmV3KDAsIDEwKSwKICAgICAgUGFkZGluZ1JpZ2h0ID0gVURpbS5uZXcoMCwgMTApLAogICAgICBQYWRkaW5nVG9wID0gVURpbS5uZXcoMCwgMTApLAogICAgICBQYWRkaW5nQm90dG9tID0gVURpbS5uZXcoMCwgMTApCiAgICB9KUNyZWF0ZSgiVUlMaXN0TGF5b3V0IiwgQ29udGFpbmVyLCB7CiAgICAgIFBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQogICAgfSkKICAgIAogICAgaWYgVGFiVGl0bGUgdGhlbgogICAgICBDcmVhdGUoIlRleHRMYWJlbCIsQ29udGFpbmVyLHtCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5PTEsVGV4dD0iIyIuLnN0cmluZy5nc3ViKFRhYk5hbWUsIiAiLCItIiksVGV4dFNpemU9MjUsRm9udD1Db25maWdzX0hVQi5UZXh0X0ZvbnQsVGV4dFhBbGlnbm1lbnQ9IkxlZnQiLFRleHRDb2xvcjM9Q29uZmlnc19IVUIuQ29yX1RleHQsU2l6ZT1VRGltMi5uZXcoMSwgMCwgMCwgMzApLFBvc2l0aW9uPVVEaW0yLm5ldygwLCAzMCwgMCwgMCksTmFtZT0iRnJhbWUifSkKICAgIGVuZAogICAgCiAgICBUZXh0QnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBmb3IgXyxjb250YWluZXIgaW4gcGFpcnMoQ29udGFpbmVyczpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIGlmIGNvbnRhaW5lcjpJc0EoIlNjcm9sbGluZ0ZyYW1lIikgdGhlbgogICAgICAgICAgY29udGFpbmVyLlZpc2libGUgPSBmYWxzZQogICAgICAgIGVuZAogICAgICBlbmQKICAgICAgZm9yIF8sZnJhbWUgaW4gcGFpcnMoU2Nyb2xsQmFyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgZnJhbWU6SXNBKCJGcmFtZSIpIGFuZCBmcmFtZTpGaW5kRmlyc3RDaGlsZCgiVGV4dExhYmVsIikgYW5kIGZyYW1lLlRleHRMYWJlbCB+PSBUZXh0TGFiZWwgdGhlbgogICAgICAgICAgQ3JlYXRlVHdlZW4oZnJhbWUuVGV4dExhYmVsLCAiVGV4dENvbG9yMyIsIENvbmZpZ3NfSFVCLkNvcl9EYXJrVGV4dCwgMC4zLCBmYWxzZSkKICAgICAgICAgIGZyYW1lLlRleHRMYWJlbC5UZXh0U2l6ZSA9IDE0CiAgICAgICAgZW5kCiAgICAgIGVuZAogICAgICBDb250YWluZXIuVmlzaWJsZSA9IHRydWUKICAgICAgQ3JlYXRlVHdlZW4oVGV4dExhYmVsLCAiVGV4dENvbG9yMyIsIENvbmZpZ3NfSFVCLkNvcl9UZXh0LCAwLjMsIGZhbHNlKQogICAgICBUZXh0TGFiZWwuVGV4dFNpemUgPSAxNQogICAgZW5kKQogICAgCiAgICBmaXJzdFZpc2libGUgPSBmYWxzZQogICAgRmlyc3RUYWIgPSBmYWxzZQogICAgdGV4dHNpemUgPSAxNAogICAgdGV4dGNvbG9yID0gQ29uZmlnc19IVUIuQ29yX0RhcmtUZXh0CiAgICByZXR1cm4gQ29udGFpbmVyCiAgZW5kCiAgCiAgZnVuY3Rpb24gQWRkQnV0dG9uKHBhcmVudCwgQ29uZmlncykKICAgIGxvY2FsIEJ1dHRvbk5hbWUgPSBDb25maWdzLk5hbWUgb3IgIkJ1dHRvbiEhIgogICAgbG9jYWwgQ2FsbGJhY2sgPSBDb25maWdzLkNhbGxiYWNrIG9yIGZ1bmN0aW9uKCkgZW5kCiAgICAKICAgIGxvY2FsIFRleHRCdXR0b24gPSBDcmVhdGUoIlRleHRCdXR0b24iLCBwYXJlbnQsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfT3B0aW9ucywKICAgICAgTmFtZSA9ICJGcmFtZSIsCiAgICAgIFRleHQgPSAiIiwKICAgICAgQXV0b0J1dHRvbkNvbG9yID0gZmFsc2UKICAgIH0pQ29ybmVyKFRleHRCdXR0b24pU3Ryb2tlKFRleHRCdXR0b24pCiAgICAKICAgIGxvY2FsIFRleHRMYWJlbCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgVGV4dEJ1dHRvbiwgewogICAgICBUZXh0U2l6ZSA9IDEyLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQsCiAgICAgIFRleHQgPSBCdXR0b25OYW1lLAogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMCksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBUZXh0WEFsaWdubWVudCA9ICJMZWZ0IiwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udAogICAgfSkKICAgIAogICAgbG9jYWwgSW1hZ2VMYWJlbCA9IENyZWF0ZSgiSW1hZ2VMYWJlbCIsIFRleHRCdXR0b24sIHsKICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzE1MTU1MjE5NDA1IiwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAyMCwgMCwgMjApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCAyLjUpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgSW1hZ2VDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfU3Ryb2tlCiAgICB9KQogICAgCiAgICBUZXh0QnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBDYWxsYmFjaygiQ2xpY2shISIpCiAgICAgIENyZWF0ZVR3ZWVuKEltYWdlTGFiZWwsICJJbWFnZUNvbG9yMyIsIENvbG9yMy5mcm9tUkdCKDMwLCAxNDAsIDIwMCksIDAuMiwgdHJ1ZSkKICAgICAgQ3JlYXRlVHdlZW4oSW1hZ2VMYWJlbCwgIkltYWdlQ29sb3IzIiwgQ29uZmlnc19IVUIuQ29yX1N0cm9rZSwgMC4yLCBmYWxzZSkKICAgIGVuZCkKICAgIAogICAgVGV4dFNldENvbG9yKFRleHRMYWJlbCkKICBlbmQKICAKICBmdW5jdGlvbiBBZGRUb2dnbGUocGFyZW50LCBDb25maWdzKQogICAgbG9jYWwgVG9nZ2xlTmFtZSA9IENvbmZpZ3MuTmFtZSBvciAiVG9nZ2xlISEiCiAgICBsb2NhbCBEZWZhdWx0ID0gQ29uZmlncy5EZWZhdWx0IG9yIGZhbHNlCiAgICBsb2NhbCBDYWxsYmFjayA9IENvbmZpZ3MuQ2FsbGJhY2sgb3IgZnVuY3Rpb24oKSBlbmQKICAgIAogICAgbG9jYWwgVGV4dEJ1dHRvbiA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIHBhcmVudCwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9PcHRpb25zLAogICAgICBOYW1lID0gIkZyYW1lIiwKICAgICAgVGV4dCA9ICIiLAogICAgICBBdXRvQnV0dG9uQ29sb3IgPSBmYWxzZQogICAgfSlDb3JuZXIoVGV4dEJ1dHRvbilTdHJva2UoVGV4dEJ1dHRvbikKICAgIAogICAgbG9jYWwgVGV4dExhYmVsID0gQ3JlYXRlKCJUZXh0TGFiZWwiLCBUZXh0QnV0dG9uLCB7CiAgICAgIFRleHRTaXplID0gMTIsCiAgICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgICAgVGV4dCA9IFRvZ2dsZU5hbWUsCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDM1LCAwLCAwKSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250CiAgICB9KQogICAgCiAgICBsb2NhbCBGcmFtZTEgPSBDcmVhdGUoIkZyYW1lIiwgVGV4dEJ1dHRvbiwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDI1LCAwLCAxNSksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDUsIDAsIDUpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgIH0pQ29ybmVyKEZyYW1lMSwge0Nvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDEsIDApfSkKICAgIGxvY2FsIFN0cm9rZSA9IFN0cm9rZShGcmFtZTEsIHtUaGlja25lc3MgPSAyfSkKICAgIAogICAgbG9jYWwgRnJhbWUyID0gQ3JlYXRlKCJGcmFtZSIsIEZyYW1lMSwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDEzLCAwLCAxMyksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIsIDAuNSwgMCksCiAgICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMCwgMC41KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9TdHJva2UKICAgIH0pQ29ybmVyKEZyYW1lMiwge0Nvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDEsIDApfSkKICAgIAogICAgbG9jYWwgT25PZmYgPSBmYWxzZQogICAgaWYgRGVmYXVsdCB0aGVuCiAgICAgIE9uT2ZmID0gdHJ1ZQogICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCAxMCwgMC41LCAwKSwgMC4yLCBmYWxzZSkKICAgICAgQ3JlYXRlVHdlZW4oRnJhbWUyLCAiQmFja2dyb3VuZENvbG9yMyIsIENvbG9yMy5mcm9tUkdCKDMwLCAxNDAsIDIwMCksIDAuMiwgZmFsc2UpCiAgICAgIENyZWF0ZVR3ZWVuKFN0cm9rZSwgIkNvbG9yIiwgQ29sb3IzLmZyb21SR0IoMzAsIDE0MCwgMjAwKSwgMC4yLCBmYWxzZSkKICAgICAgQ3JlYXRlVHdlZW4oVGV4dExhYmVsLCAiVGV4dENvbG9yMyIsIENvbG9yMy5mcm9tUkdCKDMwLCAxNDAsIDIwMCksIDAuMiwgZmFsc2UpCiAgICBlbmQKICAgIENhbGxiYWNrKE9uT2ZmKQogICAgVGV4dEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgaWYgRnJhbWUyLlBvc2l0aW9uLlguT2Zmc2V0IDwgNSB0aGVuCiAgICAgICAgT25PZmYgPSB0cnVlCiAgICAgICAgQ3JlYXRlVHdlZW4oRnJhbWUyLCAiUG9zaXRpb24iLCBVRGltMi5uZXcoMCwgMTAsIDAuNSwgMCksIDAuMiwgZmFsc2UpCiAgICAgICAgQ3JlYXRlVHdlZW4oRnJhbWUyLCAiQmFja2dyb3VuZENvbG9yMyIsIENvbG9yMy5mcm9tUkdCKDMwLCAxNDAsIDIwMCksIDAuMiwgZmFsc2UpCiAgICAgICAgQ3JlYXRlVHdlZW4oU3Ryb2tlLCAiQ29sb3IiLCBDb2xvcjMuZnJvbVJHQigzMCwgMTQwLCAyMDApLCAwLjIsIGZhbHNlKQogICAgICAgIENyZWF0ZVR3ZWVuKFRleHRMYWJlbCwgIlRleHRDb2xvcjMiLCBDb2xvcjMuZnJvbVJHQigzMCwgMTQwLCAyMDApLCAwLjIsIGZhbHNlKQogICAgICAgIENhbGxiYWNrKHRydWUpCiAgICAgIGVsc2UKICAgICAgICBPbk9mZiA9IGZhbHNlCiAgICAgICAgQ3JlYXRlVHdlZW4oRnJhbWUyLCAiUG9zaXRpb24iLCBVRGltMi5uZXcoMCwgMiwgMC41LCAwKSwgMC4yLCBmYWxzZSkKICAgICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJCYWNrZ3JvdW5kQ29sb3IzIiwgQ29uZmlnc19IVUIuQ29yX1N0cm9rZSwgMC4yLCBmYWxzZSkKICAgICAgICBDcmVhdGVUd2VlbihTdHJva2UsICJDb2xvciIsIENvbmZpZ3NfSFVCLkNvcl9TdHJva2UsIDAuMiwgZmFsc2UpCiAgICAgICAgQ3JlYXRlVHdlZW4oVGV4dExhYmVsLCAiVGV4dENvbG9yMyIsIENvbmZpZ3NfSFVCLkNvcl9UZXh0LCAwLjIsIGZhbHNlKQogICAgICAgIENhbGxiYWNrKGZhbHNlKQogICAgICBlbmQKICAgIGVuZCkKICAgIHJldHVybiB7RnJhbWUyLCBTdHJva2UsIE9uT2ZmLCBDYWxsYmFja30KICBlbmQKICAKICBmdW5jdGlvbiBBZGRNb2JpbGVUb2dnbGUoQ29uZmlncykKICAgIGxvY2FsIG5hbWUgPSBDb25maWdzLk5hbWUgb3IgIkF0YWxobyIKICAgIGxvY2FsIENhbGxiYWNrID0gQ29uZmlncy5DYWxsYmFjayBvciBmdW5jdGlvbigpIGVuZAogICAgbG9jYWwgdmlzaWJsZSA9IENvbmZpZ3MuVmlzaWJsZSBvciBmYWxzZQogICAgCiAgICBsb2NhbCBUb2dnbGVfQXRhbGhvID0gQ3JlYXRlKCJGcmFtZSIsIFNjcmVlbkd1aSwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgNjApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLjgsIDAsIDAuOCwgMCksCiAgICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YiwKICAgICAgRHJhZ2dhYmxlID0gdHJ1ZSwKICAgICAgQWN0aXZlID0gdHJ1ZSwKICAgICAgVmlzaWJsZSA9IHZpc2libGUKICAgIH0pQ29ybmVyKFRvZ2dsZV9BdGFsaG8pCiAgICAKICAgIGxvY2FsIFRleHRMYWJlbCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgVG9nZ2xlX0F0YWxobywgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDIwKSwKICAgICAgVGV4dFNpemUgPSAyMCwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBUZXh0ID0gbmFtZSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pCiAgICAKICAgIGxvY2FsIEJ1dHRvbiA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIFRvZ2dsZV9BdGFsaG8sIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCA0MCksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDIwKSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFRleHQgPSAiIgogICAgfSkKICAgIAogICAgbG9jYWwgRnJhbWUgPSBDcmVhdGUoIkZyYW1lIiwgQnV0dG9uLCB7CiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKSwKICAgICAgQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSksCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgLTQwLCAxLCAtMTUpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgfSlDb3JuZXIoRnJhbWUsIHtDb3JuZXJSYWRpdXMgPSBVRGltLm5ldygyLCAwKX0pCiAgICAKICAgIGxvY2FsIEZyYW1lMiA9IENyZWF0ZSgiRnJhbWUiLCBGcmFtZSwgewogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLjUsIDApLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAsIDAuNSksCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMCwgMTcsIDAsIDE3KSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pQ29ybmVyKEZyYW1lMiwge0Nvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDUsIDApfSkKICAgIAogICAgbG9jYWwgc3Ryb2tlID0gU3Ryb2tlKEZyYW1lLCB7CiAgICAgIENvbG9yID0gQ29sb3IzLmZyb21SR0IoMTAwLCAxMDAsIDEwMCksCiAgICAgIFRoaWNrbmVzcyA9IDMKICAgIH0pCiAgICAKICAgIGxvY2FsIHN0cm9rZSA9IFN0cm9rZShGcmFtZTIsIHsKICAgICAgQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxMDAsIDEwMCwgMTAwKSwKICAgICAgVGhpY2tuZXNzID0gMwogICAgfSkKICAgIAogICAgbG9jYWwgT25PZmYgPSBmYWxzZQogICAgQ2FsbGJhY2soT25PZmYpCiAgICBCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIGlmIE9uT2ZmID09IGZhbHNlIHRoZW4KICAgICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygxLCAtMjIsIDAuNSwgMCksIDAuMiwgZmFsc2UpCiAgICAgIGVsc2UKICAgICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCA1LCAwLjUsIDApLCAwLjIsIGZhbHNlKQogICAgICBlbmQKICAgICAgT25PZmYgPSBub3QgT25PZmYKICAgICAgQ2FsbGJhY2soT25PZmYpCiAgICBlbmQpCiAgICAKICAgIHJldHVybiBUb2dnbGVfQXRhbGhvCiAgZW5kCiAgCiAgZnVuY3Rpb24gVXBkYXRlVG9nZ2xlKHRvZ2dsZSwgdmFsdWUpCiAgICBsb2NhbCBGcmFtZTIgPSB0b2dnbGVbMV0KICAgIGxvY2FsIFN0cm9rZSA9IHRvZ2dsZVsyXQogICAgbG9jYWwgT25PZmYgPSB2YWx1ZQogICAgbG9jYWwgQ2FsbGJhY2sgPSB0b2dnbGVbNF0KICAgIAogICAgaWYgT25PZmYgdGhlbgogICAgICBDYWxsYmFjayh0cnVlKQogICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCAxMCwgMC41LCAwKSwgMC4yLCBmYWxzZSkKICAgICAgQ3JlYXRlVHdlZW4oRnJhbWUyLCAiQmFja2dyb3VuZENvbG9yMyIsIENvbG9yMy5mcm9tUkdCKDMwLCAxNDAsIDIwMCksIDAuMiwgZmFsc2UpCiAgICAgIENyZWF0ZVR3ZWVuKFN0cm9rZSwgIkNvbG9yIiwgQ29sb3IzLmZyb21SR0IoMzAsIDE0MCwgMjAwKSwgMC4yLCBmYWxzZSkKICAgICAgQ3JlYXRlVHdlZW4oVGV4dExhYmVsLCAiVGV4dENvbG9yMyIsIENvbG9yMy5mcm9tUkdCKDMwLCAxNDAsIDIwMCksIDAuMiwgZmFsc2UpCiAgICBlbHNlCiAgICAgIENhbGxiYWNrKGZhbHNlKQogICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCAyLCAwLjUsIDApLCAwLjIsIGZhbHNlKQogICAgICBDcmVhdGVUd2VlbihGcmFtZTIsICJCYWNrZ3JvdW5kQ29sb3IzIiwgQ29uZmlnc19IVUIuQ29yX1N0cm9rZSwgMC4yLCBmYWxzZSkKICAgICAgQ3JlYXRlVHdlZW4oU3Ryb2tlLCAiQ29sb3IiLCBDb25maWdzX0hVQi5Db3JfU3Ryb2tlLCAwLjIsIGZhbHNlKQogICAgICBDcmVhdGVUd2VlbihUZXh0TGFiZWwsICJUZXh0Q29sb3IzIiwgQ29uZmlnc19IVUIuQ29yX1RleHQsIDAuMiwgZmFsc2UpCiAgICBlbmQKICBlbmQKICAKICBmdW5jdGlvbiBBZGRTbGlkZXIocGFyZW50LCBDb25maWdzKQogICAgbG9jYWwgU2xpZGVyTmFtZSA9IENvbmZpZ3MuTmFtZSBvciAiU2xpZGVyISEiCiAgICBsb2NhbCBJbmNyZWFzZSA9IENvbmZpZ3MuSW5jcmVhc2Ugb3IgMQogICAgbG9jYWwgTWluVmFsdWUgPSBDb25maWdzLk1pblZhbHVlIC8gSW5jcmVhc2Ugb3IgMTAgLyBJbmNyZWFzZQogICAgbG9jYWwgTWF4VmFsdWUgPSBDb25maWdzLk1heFZhbHVlIC8gSW5jcmVhc2Ugb3IgMTAwIC8gSW5jcmVhc2UKICAgIGxvY2FsIERlZmF1bHQgPSBDb25maWdzLkRlZmF1bHQgb3IgMjUKICAgIGxvY2FsIENhbGxiYWNrID0gQ29uZmlncy5DYWxsYmFjayBvciBmdW5jdGlvbigpIGVuZAogICAgCiAgICBsb2NhbCBGcmFtZSA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIHBhcmVudCwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9PcHRpb25zLAogICAgICBOYW1lID0gIkZyYW1lIiwKICAgICAgVGV4dCA9IDAKICAgIH0pQ29ybmVyKEZyYW1lKVN0cm9rZShGcmFtZSkKICAgIAogICAgbG9jYWwgVGV4dExhYmVsID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgRnJhbWUsIHsKICAgICAgVGV4dFNpemUgPSAxMiwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBUZXh0ID0gU2xpZGVyTmFtZSwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMTUwLCAwLCAwKSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250CiAgICB9KVRleHRTZXRDb2xvcihUZXh0TGFiZWwpCiAgICAKICAgIGxvY2FsIFRleHRMYWJlbE51bWJlciA9IENyZWF0ZSgiVGV4dExhYmVsIiwgRnJhbWUsIHsKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAyMCwgMCwgMjApLAogICAgICBUZXh0ID0gIi4uLiIsCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDUsIDAsIDIuNSksCiAgICAgIFRleHRTY2FsZWQgPSB0cnVlLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQsCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICB9KQogICAgCiAgICBsb2NhbCBTbGlkZXJCYXIxID0gQ3JlYXRlKCJUZXh0TGFiZWwiLCBGcmFtZSwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgNy41KSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMzUsIDAuNSwgMCksCiAgICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMCwgMC41KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9TdHJva2UsCiAgICAgIFRleHQgPSAiIgogICAgfSlDb3JuZXIoU2xpZGVyQmFyMSkKICAgIAogICAgbG9jYWwgU2F2ZVBvcyA9IENyZWF0ZSgiRnJhbWUiLCBTbGlkZXJCYXIxLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMCwgMSwgMCwgMCksCiAgICAgIFZpc2libGUgPSBmYWxzZQogICAgfSkKICAgIAogICAgbG9jYWwgU2xpZGVyID0gQ3JlYXRlKCJGcmFtZSIsIFNsaWRlckJhcjEsIHsKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBTaXplID0gVURpbTIubmV3KDAsIDcuNSwgMCwgMTUpLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLjUsIDApLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAsIDAuNSksCiAgICAgIEFjdGl2ZSA9IHRydWUsCiAgICAgIERyYWdnYWJsZSA9IHRydWUKICAgIH0pQ29ybmVyKFNsaWRlcikKICAgIAogICAgbG9jYWwgU2xpZGVyQmFyMiA9IENyZWF0ZSgiRnJhbWUiLCBTbGlkZXJCYXIxLCB7CiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzMCwgMTQwLCAyMDApLAogICAgICBTaXplID0gVURpbTIubmV3KDAsIFNsaWRlci5Qb3NpdGlvbi5YLk9mZnNldCwgMSwgMCkKICAgIH0pQ29ybmVyKFNsaWRlckJhcjIpCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFVwZENvdW50ZXIoVmFsdWUpCiAgICAgIGxvY2FsIFN0cmluZyA9IHRvc3RyaW5nKFZhbHVlICogSW5jcmVhc2UpCiAgICAgIGlmIHN0cmluZy5maW5kKFN0cmluZywgIi4iKSB0aGVuCiAgICAgICAgU3RyaW5nID0gU3RyaW5nOnN1YigxLCA1KQogICAgICBlbmQKICAgICAgVGV4dExhYmVsTnVtYmVyLlRleHQgPSBTdHJpbmcKICAgICAgQ2FsbGJhY2soVmFsdWUgKiBJbmNyZWFzZSkKICAgIGVuZAogICAgCiAgICBsb2NhbCBNb3VzZUVudGVyT3JMZWF2ZSA9IGZhbHNlCiAgICBGcmFtZS5Nb3VzZUJ1dHRvbjFEb3duOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBNb3VzZUVudGVyT3JMZWF2ZSA9IHRydWUKICAgICAgd2hpbGUgTW91c2VFbnRlck9yTGVhdmUgZG8gdGFzay53YWl0KCkKICAgICAgICBsb2NhbCBNb3VzZVBvcyA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpLlggLSBTYXZlUG9zLkFic29sdXRlUG9zaXRpb24uWAogICAgICAgIFNsaWRlci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCBNb3VzZVBvcywgMC41LCAwKQogICAgICBlbmQKICAgIGVuZCkKICAgIEZyYW1lLk1vdXNlTGVhdmU6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIE1vdXNlRW50ZXJPckxlYXZlID0gZmFsc2UKICAgIGVuZCkKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gU2xpZGVyU2V0KE5ld1ZhbHVlKQogICAgICBsb2NhbCBtYXgsIG1pbiA9IE1heFZhbHVlICogSW5jcmVhc2UsIE1pblZhbHVlICogSW5jcmVhc2UKICAgICAgbG9jYWwgU2xpZGVyUG9zID0gKE5ld1ZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pCiAgICAgIGxvY2FsIFhfT2Zmc2V0ID0gU2xpZGVyUG9zICogMTAwCiAgICAgIGxvY2FsIFNsaWRlclBvc2l0aW9uID0gVURpbTIubmV3KDAsIFhfT2Zmc2V0ICsgMSwgMCwgMCkKICAgICAgQ3JlYXRlVHdlZW4oU2xpZGVyLCAiUG9zaXRpb24iLCBTbGlkZXJQb3NpdGlvbiwgMC41LCBmYWxzZSkKICAgIGVuZAogICAgU2xpZGVyU2V0KERlZmF1bHQpCiAgICAKICAgIFNsaWRlci5DaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24ocHJvcCkKICAgICAgaWYgcHJvcCA9PSAiUG9zaXRpb24iIHRoZW4KICAgICAgICBTbGlkZXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgbWF0aC5jbGFtcChTbGlkZXIuUG9zaXRpb24uWC5PZmZzZXQsIDAsIDEwMCksIDAuNSwgMCkKICAgICAgICBTbGlkZXJCYXIyLlNpemUgPSBVRGltMi5uZXcoMCwgU2xpZGVyLlBvc2l0aW9uLlguT2Zmc2V0LCAxLCAwKQogICAgICAgIGxvY2FsIFNsaWRlclBvcyA9IFNsaWRlci5Qb3NpdGlvbi5YLk9mZnNldCAvIDEwMAogICAgICAgIGxvY2FsIEFfMSA9IG1hdGguZmxvb3IoKChTbGlkZXJQb3MgKiBNYXhWYWx1ZSkgLyBNYXhWYWx1ZSkgKiAoTWF4VmFsdWUgLSBNaW5WYWx1ZSkgKyBNaW5WYWx1ZSkKICAgICAgICBVcGRDb3VudGVyKEFfMSkKICAgICAgZW5kCiAgICBlbmQpCiAgICByZXR1cm4ge1NsaWRlciwgSW5jcmVhc2UsIE1heFZhbHVlLCBNaW5WYWx1ZX0KICBlbmQKICAKICBmdW5jdGlvbiBVcGRhdGVTbGlkZXIoU2xpZGVyLCBOZXdWYWx1ZSkKICAgIGxvY2FsIEZyYW1lID0gU2xpZGVyWzFdCiAgICBsb2NhbCBJbmNyZWFzZSA9IFNsaWRlclsyXQogICAgbG9jYWwgTWF4ID0gU2xpZGVyWzNdICogSW5jcmVhc2UKICAgIGxvY2FsIE1pbiA9IFNsaWRlcls0XSAqIEluY3JlYXNlCiAgICAKICAgIGxvY2FsIFNsaWRlclBvcyA9IChOZXdWYWx1ZSAtIE1pbikgLyAoTWF4IC0gTWluKQogICAgbG9jYWwgWF9PZmZzZXQgPSBTbGlkZXJQb3MgKiAxMDAKICAgIGxvY2FsIFNsaWRlclBvc2l0aW9uID0gVURpbTIubmV3KDAsIFhfT2Zmc2V0ICsgMSwgMCwgMCkKICAgIENyZWF0ZVR3ZWVuKEZyYW1lLCAiUG9zaXRpb24iLCBTbGlkZXJQb3NpdGlvbiwgMC41LCBmYWxzZSkKICBlbmQKICAKICBmdW5jdGlvbiBBZGRLZXliaW5kKHBhcmVudCwgQ29uZmlncykKICAgIGxvY2FsIEtleWJpbmROYW1lID0gQ29uZmlncy5OYW1lIG9yICJTbGlkZXIhISIKICAgIGxvY2FsIEtleUNvZGUgPSBDb25maWdzLktleUNvZGUgb3IgIkUiCiAgICBsb2NhbCBEZWZhdWx0ID0gQ29uZmlncy5EZWZhdWx0IG9yIGZhbHNlCiAgICBsb2NhbCBDYWxsYmFjayA9IENvbmZpZ3MuQ2FsbGJhY2sgb3IgZnVuY3Rpb24oKSBlbmQKICAgIAogICAgbG9jYWwgRnJhbWUgPSBDcmVhdGUoIkZyYW1lIiwgcGFyZW50LCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX09wdGlvbnMsCiAgICAgIE5hbWUgPSAiRnJhbWUiCiAgICB9KUNvcm5lcihGcmFtZSlTdHJva2UoRnJhbWUpCiAgICAKICAgIGxvY2FsIFRleHRMYWJlbCA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIEZyYW1lLCB7CiAgICAgIFRleHRTaXplID0gMTIsCiAgICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgICAgVGV4dCA9IEtleWJpbmROYW1lLAogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMCksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBUZXh0WEFsaWdubWVudCA9ICJMZWZ0IiwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udAogICAgfSkKICAgIAogICAgbG9jYWwgS2V5YmluZCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgRnJhbWUsIHsKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAxOCwgMCwgMTgpLAogICAgICBUZXh0ID0gS2V5Q29kZSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgMy41KSwKICAgICAgVGV4dFNjYWxlZCA9IHRydWUsCiAgICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pQ29ybmVyKEtleWJpbmQpU3Ryb2tlKEtleWJpbmQpCiAgICAKICAgIGxvY2FsIE9uT2ZmID0gRGVmYXVsdAogICAgVXNlcklucHV0U2VydmljZS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICAgIGlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlW0tleUNvZGVdIHRoZW4KICAgICAgICBPbk9mZiA9IG5vdCBPbk9mZgogICAgICAgIENhbGxiYWNrKE9uT2ZmKQogICAgICBlbmQKICAgIGVuZCkKICAgIFRleHRTZXRDb2xvcihUZXh0TGFiZWwpCiAgZW5kCiAgCiAgZnVuY3Rpb24gQWRkVGV4dEJveChwYXJlbnQsIENvbmZpZ3MpCiAgICBsb2NhbCBUZXh0Qm94TmFtZSA9IENvbmZpZ3MuTmFtZSBvciAiVGV4dEJveCEhIgogICAgbG9jYWwgRGVmYXVsdCA9IENvbmZpZ3MuRGVmYXVsdCBvciAiVGV4dEJveCIKICAgIGxvY2FsIHBsYWNlaG9sZGVyVGV4dCA9IENvbmZpZ3MuUGxhY2Vob2xkZXJUZXh0IG9yICJUZXh0Qm94IgogICAgbG9jYWwgQ2xlYXJUZXh0ID0gQ29uZmlncy5DbGVhclRleHQgb3IgZmFsc2UKICAgIGxvY2FsIENhbGxiYWNrID0gQ29uZmlncy5DYWxsYmFjayBvciBmdW5jdGlvbigpIGVuZAogICAgCiAgICBsb2NhbCBGcmFtZSA9IENyZWF0ZSgiRnJhbWUiLCBwYXJlbnQsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfT3B0aW9ucywKICAgICAgTmFtZSA9ICJGcmFtZSIKICAgIH0pQ29ybmVyKEZyYW1lKVN0cm9rZShGcmFtZSkKICAgIAogICAgbG9jYWwgVGV4dExhYmVsID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgRnJhbWUsIHsKICAgICAgVGV4dFNpemUgPSAxMiwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBUZXh0ID0gVGV4dEJveE5hbWUsCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDE1MCwgMCwgMCksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBUZXh0WEFsaWdubWVudCA9ICJMZWZ0IiwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udAogICAgfSkKICAgIFRleHRTZXRDb2xvcihUZXh0TGFiZWwpCiAgICAKICAgIGxvY2FsIFRleHRCb3ggPSBDcmVhdGUoIlRleHRCb3giLCBGcmFtZSwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDEyMCwgMCwgMjApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxNSwgMCwgMi41KSwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBUZXh0ID0gRGVmYXVsdCwKICAgICAgQ2xlYXJUZXh0T25Gb2N1cyA9IENsZWFyVGV4dCwKICAgICAgUGxhY2Vob2xkZXJUZXh0ID0gcGxhY2Vob2xkZXJUZXh0LAogICAgICBUZXh0U2NhbGVkID0gdHJ1ZSwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pCiAgICAKICAgIGxvY2FsIExpbmUgPSBDcmVhdGUoIkZyYW1lIiwgVGV4dEJveCwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDEpLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDEsIDApLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9TdHJva2UsCiAgICAgIEJvcmRlclNpemVQaXhlbCA9IDAKICAgIH0pCiAgICAKICAgIFRleHRCb3guTW91c2VFbnRlcjpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgQ3JlYXRlVHdlZW4oTGluZSwgIlNpemUiLCBVRGltMi5uZXcoMCwgMCwgMCwgMSksIDAuMywgdHJ1ZSkKICAgICAgQ3JlYXRlVHdlZW4oTGluZSwgIlNpemUiLCBVRGltMi5uZXcoMSwgMCwgMCwgMSksIDAuMywgdHJ1ZSkKICAgIGVuZCkKICAgIAogICAgVGV4dEJveC5Gb2N1c0xvc3Q6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIENhbGxiYWNrKFRleHRCb3guVGV4dCkKICAgIGVuZCkKICBlbmQKICAKICBmdW5jdGlvbiBBZGRDb2xvclBpY2tlcihwYXJlbnQsIENvbmZpZ3MpCiAgICBsb2NhbCBuYW1lID0gQ29uZmlncy5OYW1lIG9yICJDb2xvciBQaWNrZXIiCiAgICBsb2NhbCBEZWZhdWx0ID0gQ29uZmlncy5EZWZhdWx0IG9yIENvbG9yMy5mcm9tUkdCKDAsIDAsIDIwMCkKICAgIGxvY2FsIENhbGxiYWNrID0gQ29uZmlncy5DYWxsYmFjayBvciBmdW5jdGlvbigpIGVuZAogICAgbG9jYWwgQ29sb3JILCBDb2xvclMsIENvbG9yViA9IDEsIDEsIDEKICAgIENhbGxiYWNrKERlZmF1bHQpCiAgICAKICAgIGxvY2FsIFRleHRCdXR0b24gPSBDcmVhdGUoIkZyYW1lIiwgcGFyZW50LCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX09wdGlvbnMsCiAgICB9KVN0cm9rZShUZXh0QnV0dG9uKUNvcm5lcihUZXh0QnV0dG9uKQogICAgCiAgICBsb2NhbCBjbGljayA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIFRleHRCdXR0b24sIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBBdXRvQnV0dG9uQ29sb3IgPSBmYWxzZSwKICAgICAgVGV4dCA9ICIiCiAgICB9KQogICAgCiAgICBsb2NhbCBUZXh0TGFiZWwgPSBDcmVhdGUoIlRleHRMYWJlbCIsIFRleHRCdXR0b24sIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTAsIDAsIDI1KSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDApLAogICAgICBUZXh0U2l6ZSA9IDEyLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBUZXh0ID0gbmFtZSwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pCiAgICAKICAgIGxvY2FsIHBpY2tlciA9IENyZWF0ZSgiRnJhbWUiLCBUZXh0QnV0dG9uLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMCwgMjAsIDAsIDIwKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgMi41KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IERlZmF1bHQKICAgIH0pQ29ybmVyKHBpY2tlcilTdHJva2UocGlja2VyKQogICAgCiAgICBsb2NhbCBVSV9HcmFkZSA9IENyZWF0ZSgiSW1hZ2VCdXR0b24iLCBUZXh0QnV0dG9uLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgLTEwMCwgMSwgdG9udW1iZXIoLVRleHRCdXR0b24uU2l6ZS5ZLk9mZnNldCAtIDIwKSksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDEwLCAwLCB0b251bWJlcihUZXh0QnV0dG9uLlNpemUuWS5PZmZzZXQgKyAxMi41KSksCiAgICAgIFZpc2libGUgPSBmYWxzZSwKICAgICAgSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzQxNTU4MDEyNTIiCiAgICB9KUNvcm5lcihVSV9HcmFkZSlTdHJva2UoVUlfR3JhZGUpbG9jYWwgU2F2ZVBvcyA9IENyZWF0ZSgiRnJhbWUiLCBVSV9HcmFkZSwge1Zpc2libGUgPSBmYWxzZX0pCiAgICAKICAgIGxvY2FsIGdyYWRlID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgVGV4dEJ1dHRvbiwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDMwLCAxLCB0b251bWJlcigtVGV4dEJ1dHRvbi5TaXplLlkuT2Zmc2V0IC0gMjApKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTEwLCAwLCB0b251bWJlcihUZXh0QnV0dG9uLlNpemUuWS5PZmZzZXQgKyAxMi41KSksCiAgICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMSwgMCksCiAgICAgIFZpc2libGUgPSBmYWxzZSwKICAgICAgVGV4dCA9ICIiCiAgICB9KUNvcm5lcihncmFkZSlTdHJva2UoZ3JhZGUpQ3JlYXRlKCJVSUdyYWRpZW50IiwgZ3JhZGUsIHsKICAgICAgUm90YXRpb24gPSA5MCwKICAgICAgQ29sb3IgPSBDb2xvclNlcXVlbmNlLm5ldyh7CiAgICAgICAgQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwLCBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDQpKSwKICAgICAgICBDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjAsIENvbG9yMy5mcm9tUkdCKDIzNCwgMjU1LCAwKSksCiAgICAgICAgQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjQwLCBDb2xvcjMuZnJvbVJHQigyMSwgMjU1LCAwKSksCiAgICAgICAgQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYwLCBDb2xvcjMuZnJvbVJHQigyNDAsIDI0MCwgMjQwKSksCiAgICAgICAgQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjgwLCBDb2xvcjMuZnJvbVJHQigwLCAxNywgMjU1KSksCiAgICAgICAgQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjkwLCBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDI1MSkpLAogICAgICAgIENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCA0KSkKICAgICAgfSkKICAgIH0pbG9jYWwgU2F2ZVBvczIgPSBDcmVhdGUoIkZyYW1lIiwgZ3JhZGUsIHtWaXNpYmxlID0gZmFsc2UsIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMCl9KQogICAgCiAgICBsb2NhbCBBXzEgPSBDcmVhdGUoIkZyYW1lIiwgVGV4dEJ1dHRvbiwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAzMCksCiAgICAgIFZpc2libGUgPSBmYWxzZQogICAgfSlTdHJva2UoQV8xKQogICAgCiAgICBsb2NhbCBTZWxlY3QxID0gQ3JlYXRlKCJGcmFtZSIsIGdyYWRlLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMTApLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCBzZWxlY3QoMywgQ29sb3IzLnRvSFNWKERlZmF1bHQpKSksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBBY3RpdmUgPSB0cnVlLAogICAgICBEcmFnZ2FibGUgPSB0cnVlCiAgICB9KUNvcm5lcihTZWxlY3QxLCB7Q29ybmVyUmFkaXVzID0gVURpbS5uZXcoMiwgMCl9KVN0cm9rZShTZWxlY3QxLCB7Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KX0pCiAgICAKICAgIGxvY2FsIFNlbGVjdDIgPSBDcmVhdGUoIkZyYW1lIiwgVUlfR3JhZGUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCAxNSwgMCwgMTUpLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCBzZWxlY3QoMiwgQ29sb3IzLnRvSFNWKERlZmF1bHQpKSwgMCwgc2VsZWN0KDEsIENvbG9yMy50b0hTVihEZWZhdWx0KSkpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgQWN0aXZlID0gdHJ1ZSwKICAgICAgRHJhZ2dhYmxlID0gdHJ1ZQogICAgfSlDb3JuZXIoU2VsZWN0Miwge0Nvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDIsIDApfSlTdHJva2UoU2VsZWN0Miwge0NvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSl9KQogIAogICAgVUlfR3JhZGUuTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgIGxvY2FsIG1vdXNlID0gVXNlcklucHV0U2VydmljZTpHZXRNb3VzZUxvY2F0aW9uKCkKICAgICAgbG9jYWwgc2F2ZXBvcyA9IFNhdmVQb3MuQWJzb2x1dGVQb3NpdGlvbgogICAgICBDcmVhdGVUd2VlbihTZWxlY3QyLCAiUG9zaXRpb24iLCBVRGltMi5uZXcoMCwgbW91c2UuWCAtIHNhdmVwb3MuWCwgMCwgdG9udW1iZXIobW91c2UuWSAtIHNhdmVwb3MuWSkgLSAzNSksIDAuMywgZmFsc2UpCiAgICBlbmQpCiAgICAKICAgIGdyYWRlLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBsb2NhbCBtb3VzZSA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpLlkgLSAzNQogICAgICBsb2NhbCBzYXZlcG9zID0gU2F2ZVBvczIuQWJzb2x1dGVQb3NpdGlvbi5ZCiAgICAgIENyZWF0ZVR3ZWVuKFNlbGVjdDEsICJQb3NpdGlvbiIsIFVEaW0yLm5ldygwLCAwLCAwLCBtb3VzZSAtIHNhdmVwb3MpLCAwLjMsIGZhbHNlKQogICAgZW5kKQogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBjYWxsYmFjaygpQ2FsbGJhY2soQ29sb3IzLmZyb21IU1YoQ29sb3JILCBDb2xvclMsIENvbG9yVikpZW5kCiAgICBsb2NhbCBmdW5jdGlvbiB1cGRjb2xvcnBpY2tlcigpCiAgICAgIENvbG9ySCA9IHRvbnVtYmVyKFNlbGVjdDEuUG9zaXRpb24uWS5PZmZzZXQpIC8gODAKICAgICAgQ29sb3JTID0gdG9udW1iZXIoMjE1IC0gU2VsZWN0Mi5Qb3NpdGlvbi5YLk9mZnNldCkgLyAyMTUKICAgICAgQ29sb3JWID0gdG9udW1iZXIoNzUgLSBTZWxlY3QyLlBvc2l0aW9uLlkuT2Zmc2V0KSAvIDc1CiAgICAgIFVJX0dyYWRlLkltYWdlQ29sb3IzID0gQ29sb3IzLmZyb21IU1YoQ29sb3JILCAxLCAxKQogICAgICBwaWNrZXIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tSFNWKENvbG9ySCwgQ29sb3JTLCBDb2xvclYpCiAgICAgIGNhbGxiYWNrKCkKICAgIGVuZAogICAgCiAgICB1cGRjb2xvcnBpY2tlcigpCiAgICAKICAgIFNlbGVjdDEuQ2hhbmdlZDpDb25uZWN0KGZ1bmN0aW9uKHByb3ApCiAgICAgIGlmIHByb3AgPT0gIlBvc2l0aW9uIiB0aGVuCiAgICAgICAgU2VsZWN0MS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCBtYXRoLmNsYW1wKFNlbGVjdDEuUG9zaXRpb24uWS5PZmZzZXQsIDAsIDgwKSkKICAgICAgICB1cGRjb2xvcnBpY2tlcigpCiAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICBTZWxlY3QyLkNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihwcm9wKQogICAgICBpZiBwcm9wID09ICJQb3NpdGlvbiIgdGhlbgogICAgICAgIFNlbGVjdDIuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgbWF0aC5jbGFtcChTZWxlY3QyLlBvc2l0aW9uLlguT2Zmc2V0LCAwLCAyMjIpLCAwLCBtYXRoLmNsYW1wKFNlbGVjdDIuUG9zaXRpb24uWS5PZmZzZXQsIDAsIDc1KSkKICAgICAgICB1cGRjb2xvcnBpY2tlcigpCiAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICBUZXh0QnV0dG9uLkNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihwcm9wKQogICAgICBpZiBwcm9wID09ICJTaXplIiB0aGVuCiAgICAgICAgaWYgVGV4dEJ1dHRvbi5TaXplLlkuT2Zmc2V0ID49IDYwIHRoZW4KICAgICAgICAgIHBpY2tlci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCA1KQogICAgICAgICAgVUlfR3JhZGUuVmlzaWJsZSA9IHRydWUKICAgICAgICAgIEFfMS5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgZ3JhZGUuVmlzaWJsZSA9IHRydWUKICAgICAgICBlbHNlCiAgICAgICAgICBwaWNrZXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgMi41KQogICAgICAgICAgVUlfR3JhZGUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICBBXzEuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICBncmFkZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICBlbmQKICAgICAgZW5kCiAgICBlbmQpCiAgICAKICAgIGxvY2FsIG9ub2ZmID0gZmFsc2UKICAgIGNsaWNrLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICBvbm9mZiA9IG5vdCBvbm9mZgogICAgICBpZiBvbm9mZiA9PSB0cnVlIHRoZW4KICAgICAgICBsb2NhbCB0d2VlbiA9IFR3ZWVuU2VydmljZTpDcmVhdGUoVGV4dEJ1dHRvbiwgVHdlZW5JbmZvLm5ldygwLjIsIEVudW0uRWFzaW5nU3R5bGUuTGluZWFyKSwKICAgICAgICB7U2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAxNDApfSl0d2VlbjpwbGF5KCl0d2Vlbi5Db21wbGV0ZWQ6V2FpdCgpCiAgICAgIGVsc2UKICAgICAgICBsb2NhbCB0d2VlbiA9IFR3ZWVuU2VydmljZTpDcmVhdGUoVGV4dEJ1dHRvbiwgVHdlZW5JbmZvLm5ldygwLjIsIEVudW0uRWFzaW5nU3R5bGUuTGluZWFyKSwKICAgICAgICB7U2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSl9KXR3ZWVuOnBsYXkoKXR3ZWVuLkNvbXBsZXRlZDpXYWl0KCkKICAgICAgZW5kCiAgICBlbmQpCiAgZW5kCiAgCiAgZnVuY3Rpb24gQWRkRHJvcGRvd24ocGFyZW50LCBDb25maWdzKQogICAgbG9jYWwgRHJvcGRvd25OYW1lID0gQ29uZmlncy5OYW1lIG9yICJEcm9wZG93biEhIgogICAgbG9jYWwgRGVmYXVsdCA9IENvbmZpZ3MuRGVmYXVsdCBvciAiVGV4dEJveCIKICAgIGxvY2FsIE9wdGlvbnMgPSBDb25maWdzLk9wdGlvbnMgb3IgeyIxIiwgIjIiLCAiMyJ9CiAgICBsb2NhbCBEZWZhdWx0ID0gQ29uZmlncy5EZWZhdWx0IG9yICIyIgogICAgbG9jYWwgQ2FsbGJhY2sgPSBDb25maWdzLkNhbGxiYWNrIG9yIGZ1bmN0aW9uKCkgZW5kCiAgICAKICAgIGxvY2FsIFRleHRCdXR0b24gPSBDcmVhdGUoIlRleHRCdXR0b24iLCBwYXJlbnQsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfT3B0aW9ucywKICAgICAgTmFtZSA9ICJGcmFtZSIsCiAgICAgIFRleHQgPSAiIiwKICAgICAgQXV0b0J1dHRvbkNvbG9yID0gZmFsc2UKICAgIH0pQ29ybmVyKEZyYW1lKVN0cm9rZShGcmFtZSkKICAgIAogICAgbG9jYWwgVGV4dExhYmVsID0gQ3JlYXRlKCJUZXh0TGFiZWwiLCBUZXh0QnV0dG9uLCB7CiAgICAgIFRleHRTaXplID0gMTIsCiAgICAgIFRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dCwKICAgICAgVGV4dCA9IERyb3Bkb3duTmFtZSwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAsIDM1LCAwLCAwKSwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250CiAgICB9KVRleHRTZXRDb2xvcihUZXh0TGFiZWwpCiAgICAKICAgIGxvY2FsIExpbmUgPSBDcmVhdGUoIkZyYW1lIiwgVGV4dEJ1dHRvbiwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDEpLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAyNSksCiAgICAgIEJvcmRlclNpemVQaXhlbCA9IDAsCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfU3Ryb2tlLAogICAgICBWaXNpYmxlID0gZmFsc2UKICAgIH0pCiAgICAKICAgIGxvY2FsIEFycm93ID0gQ3JlYXRlKCJJbWFnZUxhYmVsIiwgVGV4dEJ1dHRvbiwgewogICAgICBJbWFnZSA9ICJyYnhhc3NldGlkOi8vNjAzMTA5MDk5MCIsCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMCwgMjUsIDAsIDI1KSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgMCksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICB9KQogICAgCiAgICBsb2NhbCBEZWZhdWx0VGV4dCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgVGV4dEJ1dHRvbiwgewogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YiwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuMSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTIwLCAwLCAyLjUpLAogICAgICBBbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDEsIDApLAogICAgICBTaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgMjApLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0RhcmtUZXh0LAogICAgICBUZXh0U2NhbGVkID0gdHJ1ZSwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgVGV4dCA9ICIuLi4iCiAgICB9KUNvcm5lcihEZWZhdWx0VGV4dClTdHJva2UoRGVmYXVsdFRleHQpCiAgICAKICAgIGxvY2FsIFNjcm9sbEJhciA9IENyZWF0ZSgiU2Nyb2xsaW5nRnJhbWUiLCBUZXh0QnV0dG9uLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgLTI1KSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMjUpLAogICAgICBDYW52YXNTaXplID0gVURpbTIubmV3KCksCiAgICAgIFNjcm9sbGluZ0RpcmVjdGlvbiA9ICJZIiwKICAgICAgQXV0b21hdGljQ2FudmFzU2l6ZSA9ICJZIiwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFNjcm9sbEJhclRoaWNrbmVzcyA9IDIKICAgIH0pQ3JlYXRlKCJVSVBhZGRpbmciLCBTY3JvbGxCYXIsIHsKICAgICAgUGFkZGluZ0xlZnQgPSBVRGltLm5ldygwLCAxMCksCiAgICAgIFBhZGRpbmdSaWdodCA9IFVEaW0ubmV3KDAsIDEwKSwKICAgICAgUGFkZGluZ1RvcCA9IFVEaW0ubmV3KDAsIDEwKSwKICAgICAgUGFkZGluZ0JvdHRvbSA9IFVEaW0ubmV3KDAsIDEwKQogICAgfSlDcmVhdGUoIlVJTGlzdExheW91dCIsIFNjcm9sbEJhciwgewogICAgICBQYWRkaW5nID0gVURpbS5uZXcoMCwgNSkKICAgIH0pCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIEFkZE9wdGlvbihPcHRpb25OYW1lKQogICAgICBsb2NhbCBUZXh0QnV0dG9uID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgU2Nyb2xsQmFyLCB7CiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAxNSksCiAgICAgICAgVGV4dCA9IE9wdGlvbk5hbWUsCiAgICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgICBUZXh0U2l6ZSA9IDEyLAogICAgICAgIFRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE4MCwgMTgwKSwKICAgICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICB9KUNvcm5lcihUZXh0QnV0dG9uKQogICAgICAKICAgICAgbG9jYWwgU2VsZWN0VGFibGUgPSB7fQogICAgICBsb2NhbCBPbk9mZiA9IGZhbHNlCiAgICAgIGlmIE9wdGlvbk5hbWUgPT0gRGVmYXVsdCB0aGVuCiAgICAgICAgT25PZmYgPSB0cnVlCiAgICAgICAgVGV4dEJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC44CiAgICAgICAgVGV4dEJ1dHRvbi5UZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQKICAgICAgICBEZWZhdWx0VGV4dC5UZXh0ID0gT3B0aW9uTmFtZQogICAgICAgIENhbGxiYWNrKE9wdGlvbk5hbWUpCiAgICAgIGVuZAogICAgICAKICAgICAgVGV4dEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBmb3IgXyx2IGluIHBhaXJzKFNjcm9sbEJhcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgaWYgdjpJc0EoIlRleHRCdXR0b24iKSB0aGVuCiAgICAgICAgICAgIHYuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICAgICAgdi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTgwLCAxODAsIDE4MCkKICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIERlZmF1bHRUZXh0LlRleHQgPSBPcHRpb25OYW1lCiAgICAgICAgQ2FsbGJhY2soT3B0aW9uTmFtZSkKICAgICAgICBUZXh0QnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjgKICAgICAgICBUZXh0QnV0dG9uLlRleHRDb2xvcjMgPSBDb25maWdzX0hVQi5Db3JfVGV4dAogICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgZm9yIF8sdiBpbiBwYWlycyhPcHRpb25zKSBkbwogICAgICBBZGRPcHRpb24odikKICAgIGVuZAogICAgCiAgICBsb2NhbCBEcm9wT25PZmYgPSBmYWxzZQogICAgVGV4dEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgbG9jYWwgT3B0aW9uU2l6ZSwgT3B0aW9uc051bWJlciA9IDI1LCAwCiAgICAgIGZvciBfLHYgaW4gcGFpcnMoU2Nyb2xsQmFyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgdjpJc0EoIlRleHRCdXR0b24iKSBhbmQgT3B0aW9uc051bWJlciA8IDUgdGhlbgogICAgICAgICAgT3B0aW9uc051bWJlciA9IE9wdGlvbnNOdW1iZXIgKyAxCiAgICAgICAgICBPcHRpb25TaXplID0gT3B0aW9uU2l6ZSArIHRvbnVtYmVyKHYuU2l6ZS5ZLk9mZnNldCArIDEwKQogICAgICAgIGVuZAogICAgICBlbmQKICAgICAgaWYgbm90IERyb3BPbk9mZiB0aGVuCiAgICAgICAgQ3JlYXRlVHdlZW4oVGV4dEJ1dHRvbiwgIlNpemUiLCBVRGltMi5uZXcoMSwgMCwgMCwgT3B0aW9uU2l6ZSksIDAuMywgZmFsc2UpCiAgICAgICAgQ3JlYXRlVHdlZW4oQXJyb3csICJSb3RhdGlvbiIsIDE4MCwgMC4zLCBmYWxzZSkKICAgICAgICBEcm9wT25PZmYgPSB0cnVlCiAgICAgICAgTGluZS5WaXNpYmxlID0gdHJ1ZQogICAgICBlbHNlCiAgICAgICAgQ3JlYXRlVHdlZW4oVGV4dEJ1dHRvbiwgIlNpemUiLCBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLCAwLjMsIGZhbHNlKQogICAgICAgIENyZWF0ZVR3ZWVuKEFycm93LCAiUm90YXRpb24iLCAwLCAwLjMsIHRydWUpCiAgICAgICAgRHJvcE9uT2ZmID0gZmFsc2UKICAgICAgICBMaW5lLlZpc2libGUgPSBmYWxzZQogICAgICBlbmQKICAgIGVuZCkKICAgIHJldHVybiB7U2Nyb2xsQmFyLCBEZWZhdWx0LCBDYWxsYmFjaywgRGVmYXVsdFRleHR9CiAgZW5kCiAgCiAgZnVuY3Rpb24gVXBkYXRlRHJvcGRvd24oRHJvcGRvd24sIE5ld09wdGlvbnMpCiAgICBsb2NhbCBTY3JvbGxCYXIgPSBEcm9wZG93blsxXQogICAgbG9jYWwgRGVmYXVsdCA9IERyb3Bkb3duWzJdCiAgICBsb2NhbCBDYWxsYmFjayA9IERyb3Bkb3duWzNdCiAgICBsb2NhbCBEZWZhdWx0VGV4dCA9IERyb3Bkb3duWzRdCiAgICAKICAgIGZvciBfLHYgaW4gcGFpcnMoU2Nyb2xsQmFyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgIGlmIHY6SXNBKCJUZXh0QnV0dG9uIikgdGhlbgogICAgICAgIHY6RGVzdHJveSgpCiAgICAgIGVuZAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIEFkZE9wdGlvbihPcHRpb25OYW1lKQogICAgICBsb2NhbCBUZXh0QnV0dG9uID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgU2Nyb2xsQmFyLCB7CiAgICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAxNSksCiAgICAgICAgVGV4dCA9IE9wdGlvbk5hbWUsCiAgICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udCwKICAgICAgICBUZXh0U2l6ZSA9IDEyLAogICAgICAgIFRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE4MCwgMTgwKSwKICAgICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICB9KUNvcm5lcihUZXh0QnV0dG9uKQogICAgICAKICAgICAgbG9jYWwgU2VsZWN0VGFibGUgPSB7fQogICAgICBsb2NhbCBPbk9mZiA9IGZhbHNlCiAgICAgIGlmIE9wdGlvbk5hbWUgPT0gRGVmYXVsdCB0aGVuCiAgICAgICAgT25PZmYgPSB0cnVlCiAgICAgICAgVGV4dEJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC44CiAgICAgICAgVGV4dEJ1dHRvbi5UZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQKICAgICAgICBEZWZhdWx0VGV4dC5UZXh0ID0gT3B0aW9uTmFtZQogICAgICAgIENhbGxiYWNrKE9wdGlvbk5hbWUpCiAgICAgIGVsc2UKICAgICAgICBEZWZhdWx0VGV4dC5UZXh0ID0gIi4uLiIKICAgICAgZW5kCiAgICAgIAogICAgICBUZXh0QnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIGZvciBfLHYgaW4gcGFpcnMoU2Nyb2xsQmFyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICBpZiB2OklzQSgiVGV4dEJ1dHRvbiIpIHRoZW4KICAgICAgICAgICAgdi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgICAgICB2LlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE4MCwgMTgwKQogICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgRGVmYXVsdFRleHQuVGV4dCA9IE9wdGlvbk5hbWUKICAgICAgICBDYWxsYmFjayhPcHRpb25OYW1lKQogICAgICAgIFRleHRCdXR0b24uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuOAogICAgICAgIFRleHRCdXR0b24uVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0CiAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBmb3IgXyx2IGluIHBhaXJzKE5ld09wdGlvbnMpIGRvCiAgICAgIEFkZE9wdGlvbih2KQogICAgZW5kCiAgZW5kCiAgCiAgZnVuY3Rpb24gQWRkVGV4dExhYmVsKHBhcmVudCwgQ29uZmlncykKICAgIGxvY2FsIExhYmVsTmFtZSA9IENvbmZpZ3NbMV0gb3IgQ29uZmlncy5OYW1lIG9yICJUZXh0IExhYmVsISEiCiAgICAKICAgIGxvY2FsIEZyYW1lID0gQ3JlYXRlKCJGcmFtZSIsIHBhcmVudCwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9PcHRpb25zLAogICAgICBOYW1lID0gIkZyYW1lIgogICAgfSlDb3JuZXIoRnJhbWUpU3Ryb2tlKEZyYW1lKQogICAgCiAgICBsb2NhbCBUZXh0QnV0dG9uID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgRnJhbWUsIHsKICAgICAgVGV4dFNpemUgPSAxMiwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9UZXh0LAogICAgICBUZXh0ID0gTGFiZWxOYW1lLAogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMjAsIDAsIDApLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgVGV4dFhBbGlnbm1lbnQgPSAiTGVmdCIsCiAgICAgIEZvbnQgPSBDb25maWdzX0hVQi5UZXh0X0ZvbnQKICAgIH0pCiAgICBUZXh0U2V0Q29sb3IoVGV4dEJ1dHRvbikKICAgIHJldHVybiBUZXh0QnV0dG9uCiAgZW5kCiAgCiAgZnVuY3Rpb24gU2V0TGFiZWwobGFiZWwsIE5ld1ZhbHVlKQogICAgbGFiZWwuVGV4dCA9IE5ld1ZhbHVlCiAgZW5kCiAgCiAgZnVuY3Rpb24gQWRkSW1hZ2VMYWJlbChwYXJlbnQsIENvbmZpZ3MpCiAgICBsb2NhbCBMYWJlbE5hbWUgPSBDb25maWdzWzFdIG9yIENvbmZpZ3MuTmFtZSBvciAiIgogICAgbG9jYWwgTGFiZWxJbWFnZSA9IENvbmZpZ3NbMl0gb3IgQ29uZmlncy5JbWFnZSBvciAiSW1hZ2UgTGFiZWwiCiAgICAKICAgIGxvY2FsIEZyYW1lID0gQ3JlYXRlKCJGcmFtZSIsIHBhcmVudCwgewogICAgICBTaXplID0gVURpbTIubmV3KDAsIDk1LCAwLCAxMTApLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX09wdGlvbnMsCiAgICAgIE5hbWUgPSAiRnJhbWUiCiAgICB9KUNvcm5lcihGcmFtZSlTdHJva2UoRnJhbWUpCiAgICAKICAgIGxvY2FsIFRleHRCdXR0b24gPSBDcmVhdGUoIlRleHRCdXR0b24iLCBGcmFtZSwgewogICAgICBUZXh0U2l6ZSA9IDEyLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQsCiAgICAgIFRleHQgPSBMYWJlbE5hbWUsCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgRm9udCA9IENvbmZpZ3NfSFVCLlRleHRfRm9udAogICAgfSkKICAgIAogICAgbG9jYWwgSW1hZ2VMYWJlbCA9IENyZWF0ZSgiSW1hZ2VMYWJlbCIsIEZyYW1lLCB7CiAgICAgIEltYWdlID0gTGFiZWxJbWFnZSwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygwLCA3NSwgMCwgNzUpLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxMCwgMCwgMjUpCiAgICB9KQogICAgVGV4dFNldENvbG9yKFRleHRCdXR0b24pCiAgICByZXR1cm4gSW1hZ2VMYWJlbAogIGVuZAogIAogIGZ1bmN0aW9uIFNldEltYWdlKGxhYmVsLCBOZXdJbWFnZSkKICAgIGxhYmVsLkltYWdlID0gTmV3SW1hZ2UKICBlbmQKICAKICBmdW5jdGlvbiBBZGRQYXJhZ3JhcGgocGFyZW50LCBDb25maWdzKQogICAgbG9jYWwgUGFyYWdyYXBoTmFtZTEgPSBDb25maWdzWzFdIG9yIENvbmZpZ3MuVGl0bGUgb3IgIlBhcmFncmFwaCEhIgogICAgbG9jYWwgUGFyYWdyYXBoTmFtZTIgPSBDb25maWdzWzFdIG9yIENvbmZpZ3MuVGV4dCBvciAiUGFyYWdyYXBoISEiCiAgICAKICAgIGxvY2FsIEZyYW1lID0gQ3JlYXRlKCJGcmFtZSIsIHBhcmVudCwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KSwKICAgICAgQmFja2dyb3VuZENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9PcHRpb25zLAogICAgICBOYW1lID0gIkZyYW1lIiwKICAgICAgQXV0b21hdGljU2l6ZSA9ICJZIgogICAgfSlDb3JuZXIoRnJhbWUpU3Ryb2tlKEZyYW1lKUNyZWF0ZSgiVUlMaXN0TGF5b3V0IiwgRnJhbWUpQ3JlYXRlKCJVSVBhZGRpbmciLCBGcmFtZSwgewogICAgICBQYWRkaW5nTGVmdCA9IFVEaW0ubmV3KDAsIDIwKSwgUGFkZGluZ1JpZ2h0ID0gVURpbS5uZXcoMCwgMTApLCBQYWRkaW5nVG9wID0gVURpbS5uZXcoMCwgNSksIFBhZGRpbmdCb3R0b20gPSBVRGltLm5ldygwLCA1KQogICAgfSkKICAgIAogICAgbG9jYWwgVGV4dEJ1dHRvbiA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIEZyYW1lLCB7CiAgICAgIE5hbWUgPSAiRnJhbWUiLAogICAgICBUZXh0U2l6ZSA9IDEyLAogICAgICBUZXh0Q29sb3IzID0gQ29uZmlnc19IVUIuQ29yX1RleHQsCiAgICAgIFRleHQgPSBQYXJhZ3JhcGhOYW1lMSwKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAwKSwKICAgICAgQXV0b21hdGljU2l6ZSA9ICJZIiwKICAgICAgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBUZXh0WUFsaWdubWVudCA9ICJUb3AiLAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgICBUZXh0V3JhcHBlZCA9IHRydWUKICAgIH0pVGV4dFNldENvbG9yKFRleHRCdXR0b24pCiAgICAKICAgIGxvY2FsIFRleHRMYWJlbCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgRnJhbWUsIHsKICAgICAgTmFtZSA9ICJGcmFtZSIsCiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMCksCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBBdXRvbWF0aWNTaXplID0gIlkiLAogICAgICBUZXh0WEFsaWdubWVudCA9ICJMZWZ0IiwKICAgICAgVGV4dFlBbGlnbm1lbnQgPSAiVG9wIiwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9EYXJrVGV4dCwKICAgICAgVGV4dFNpemUgPSAxMSwKICAgICAgVGV4dCA9IFBhcmFncmFwaE5hbWUyLAogICAgICBGb250ID0gQ29uZmlnc19IVUIuVGV4dF9Gb250LAogICAgICBUZXh0V3JhcHBlZCA9IHRydWUKICAgIH0pCiAgICByZXR1cm4ge1RleHRCdXR0b24sIFRleHRMYWJlbH0KICBlbmQKICAKICBmdW5jdGlvbiBTZXRQYXJhZ3JhcGgoUGFyYWdyYXBoLCBOZXdWYWx1ZSkKICAgIFBhcmFncmFwaFsxXS5UZXh0ID0gTmV3VmFsdWVbMV0KICAgIFBhcmFncmFwaFsyXS5UZXh0ID0gTmV3VmFsdWVbMl0KICBlbmQKICAKICBmdW5jdGlvbiBBZGRTZWN0aW9uKHBhcmVudCwgQ29uZmlncykKICAgIGxvY2FsIFNlY3Rpb25OYW1lID0gQ29uZmlnc1sxXSBvciBDb25maWdzLk5hbWUgb3IgIlNlY3Rpb24hISIKICAgIAogICAgbG9jYWwgRnJhbWUgPSBDcmVhdGUoIkZyYW1lIiwgcGFyZW50LCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjUpLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29uZmlnc19IVUIuQ29yX0h1YiwKICAgICAgTmFtZSA9ICJGcmFtZSIsCiAgICAgIFRyYW5zcGFyZW5jeSA9IDEKICAgIH0pQ29ybmVyKEZyYW1lKQogICAgCiAgICBsb2NhbCBUZXh0QnV0dG9uID0gQ3JlYXRlKCJUZXh0QnV0dG9uIiwgRnJhbWUsIHsKICAgICAgVGV4dFNpemUgPSAxMiwKICAgICAgVGV4dENvbG9yMyA9IENvbmZpZ3NfSFVCLkNvcl9EYXJrVGV4dCwKICAgICAgVGV4dCA9IFNlY3Rpb25OYW1lLAogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMTAsIDAsIDApLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgVGV4dFhBbGlnbm1lbnQgPSAiTGVmdCIsCiAgICAgIEZvbnQgPSBDb25maWdzX0hVQi5UZXh0X0ZvbnQKICAgIH0pCiAgICByZXR1cm4gVGV4dEJ1dHRvbgogIGVuZAogIAogIGZ1bmN0aW9uIFNldFNlY3Rpb24oU2VjdGlvbiwgTmV3TmFtZSkKICAgIFNlY3Rpb24uVGV4dCA9IE5ld05hbWUKICBlbmQKICAKICBmdW5jdGlvbiBBZGREaXNjb3JkKHBhcmVudCwgQ29uZmlncykKICAgIGxvY2FsIERpc2NvcmRMaW5rID0gQ29uZmlnc1sxXSBvciBDb25maWdzLkRpc2NvcmRMaW5rIG9yICJodHRwczovL2Rpc2NvcmQuZ2cvIgogICAgbG9jYWwgRGlzY29yZEljb24gPSBDb25maWdzWzJdIG9yIENvbmZpZ3MuRGlzY29yZEljb24gb3IgInJieGFzc2V0aWQ6Ly8iCiAgICBsb2NhbCBEaXNjb3JkVGl0bGUgPSBDb25maWdzWzNdIG9yIENvbmZpZ3MuRGlzY29yZFRpdGxlIG9yICIiCiAgICAKICAgIGxvY2FsIEZyYW1lID0gQ3JlYXRlKCJGcmFtZSIsIHBhcmVudCwgewogICAgICBTaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDExMCksCiAgICAgIEJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzMCwgMzAsIDMwKSwKICAgICAgTmFtZSA9ICJGcmFtZSIsCiAgICAgIEF1dG9tYXRpY1NpemUgPSAiWSIKICAgIH0pCiAgICAKICAgIGxvY2FsIExpbmtMYWJlbCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgRnJhbWUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIFRleHQgPSBEaXNjb3JkTGluaywKICAgICAgVGV4dFhBbGlnbm1lbnQgPSAiTGVmdCIsCiAgICAgIEJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxMiwgMCwgMCksCiAgICAgIFRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAxMjAsIDI1NSksCiAgICAgIEZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZCwKICAgICAgVGV4dFNpemUgPSAxNAogICAgfSkKICAgIAogICAgbG9jYWwgVGl0bGVMYWJlbCA9IENyZWF0ZSgiVGV4dExhYmVsIiwgRnJhbWUsIHsKICAgICAgU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSksCiAgICAgIFRleHQgPSBEaXNjb3JkVGl0bGUsCiAgICAgIFRleHRYQWxpZ25tZW50ID0gIkxlZnQiLAogICAgICBCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNjAsIDAsIDI1KSwKICAgICAgVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApLAogICAgICBGb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQsCiAgICAgIFRleHRTaXplID0gMTQKICAgIH0pCiAgICAKICAgIGxvY2FsIEljb25MYWJlbCA9IENyZWF0ZSgiSW1hZ2VMYWJlbCIsIEZyYW1lLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMCwgNDAsIDAsIDQwKSwKICAgICAgQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLCAwLjUpLAogICAgICBQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxMiwgMC40NSwgMCksCiAgICAgIEltYWdlID0gRGlzY29yZEljb24KICAgIH0pQ29ybmVyKEljb25MYWJlbCkKICAgIAogICAgbG9jYWwgSm9pbkJ1dHRvbiA9IENyZWF0ZSgiVGV4dEJ1dHRvbiIsIEZyYW1lLCB7CiAgICAgIFNpemUgPSBVRGltMi5uZXcoMSwgLTI0LCAwLCAyNSksCiAgICAgIEFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAxKSwKICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAxLCAtOCksCiAgICAgIFRleHQgPSAiSm9pbiIsCiAgICAgIEZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZCwKICAgICAgVGV4dFNpemUgPSAxNSwKICAgICAgVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIyMCwgMjIwLCAyMjApLAogICAgICBCYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNTAsIDIwMCwgNTApCiAgICB9KUNvcm5lcihJY29uTGFiZWwpCiAgICAKICAgIGxvY2FsIHRpbWUgPSB0aWNrKCkKICAgIENsaWNrQ29udGVyID0gMAogICAgSm9pbkJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgaWYgQ2xpY2tDb250ZXIgPT0gMCBvciB0aWNrKCkgLSB0aW1lID4gNSB0aGVuIHRpbWUgPSB0aWNrKCkgc2V0Y2xpcGJvYXJkKERpc2NvcmRMaW5rKSBDbGlja0NvbnRlciA9IENsaWNrQ29udGVyICsgMQogICAgICAgIEpvaW5CdXR0b24uVGV4dCA9ICJDb3BpZWQgdG8gQ2xpcGJvYXJkIgogICAgICAgIEpvaW5CdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDEwMCwgMTAwLCAxMDApCiAgICAgICAgSm9pbkJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTUwLCAxNTAsIDE1MCkKICAgICAgICB0YXNrLndhaXQoNSkKICAgICAgICBKb2luQnV0dG9uLlRleHQgPSAiSm9pbiIKICAgICAgICBKb2luQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig1MCwgMjAwLCA1MCkKICAgICAgICBKb2luQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMjAsIDIyMCwgMjIwKQogICAgICBlbmQKICAgIGVuZCkKICBlbmQKICByZXR1cm4gTWVudQplbmQ=
]]))()
